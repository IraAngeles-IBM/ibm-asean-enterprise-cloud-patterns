{"componentChunkName":"component---src-pages-certificate-management-deploy-to-vpclb-index-mdx","path":"/certificate-management/deploy-to-vpclb/","result":{"pageContext":{"frontmatter":{"title":"Deploying certificates to VPC Load Balancers","description":"Loading TLS certificates and private keys to VPC Load Balancer instances","keywords":"tls,vpc load balancer,certificate-manager,security"},"relativePagePath":"/certificate-management/deploy-to-vpclb/index.mdx","titleType":"page","MdxNode":{"id":"a5c8a550-a7f5-5cd7-bd65-1248e824ec2e","children":[],"parent":"a0a6c587-1dd2-5a75-a57b-c96b1861d6b5","internal":{"content":"---\ntitle: Deploying certificates to VPC Load Balancers\ndescription: Loading TLS certificates and private keys to VPC Load Balancer instances\nkeywords: 'tls,vpc load balancer,certificate-manager,security'\n---\n\n<!--\n\nThe pattern to document the resources is like follow:\n- Introduce the resource with an example\n- List all or the most important input parameters\n- If will be used, list the most important output parameters\n- Provide instructions to get the value of the input parameters, either using `ibmcloud`, API or the Web console.\n- If needed, instructions to execute the code either with Terraform or Schematics\n\n-->\n\n<PageDescription>\n\nDeploying certificates to VPC Load Balancers\n\n</PageDescription>\n\nThe Certificate Manager service provides support for deploying certificates to multiple IBM Cloud services. This section reviews how to configure access from the VPC Load Balancer service to the Certificate Manager service and add an HTTPS listener to a VPC Load Balancer.\n\nThe example will use the certificate ordered in the [service setup](/certificate-management/service-setup) section. The terraform code from [IaC compute](/iac-resources/compute) will be used to create the vpc, application and load balancer instance.\n\nThe code to manage the creation of the example can be found in the GitHub repository https://github.com/IBM/cloud-enterprise-examples/ in the directory [14-certificate-management/vpc-lbaas-certificate](https://github.com/IBM/cloud-enterprise-examples/tree/master/iac/14-certificate-management/vpc-lbaas-certificate).\n\n<AnchorLinks small>\n  <AnchorLink>Configure VPC Load Balancer HTTPS listener</AnchorLink>\n  <AnchorLink>Clean Up</AnchorLink>\n</AnchorLinks>\n\n<InlineNotification>\n\n**Requirements**\n\nTo be able to execute and complete the instructions in this page, make sure you have an **IBM Cloud account**: if you don't have one yet, you can [create a Lite account](https://cloud.ibm.com/docs/overview?topic=overview-quickstart_lite#prereqs-lite) for free.\n\nThese examples will require an internet DNS domain that is managed by the user or can be used with a domain managed by the IBM Cloud Internet Services service.\n\nAlso make sure you have the environment setup as explained in the [Setup Environment](/iac/setup-environment) page to have installed the IBM Cloud CLI, logged in to your account with the IBM Cloud CLI and set the `IC_API_KEY` environment variable to a key which has the ability to manage IAM configuration.\n\n</InlineNotification>\n\n## Configure VPC Load Balancer HTTPS listener\n\nThe VPC Load Balancer service can terminate and offload processing of [incoming SSL/TLS connections](https://cloud.ibm.com/docs/vpc?topic=vpc-load-balancers#ssl-offloading-and-required-authorizations). In order to do this, a front-end listener pool is defined using the HTTPS protocol and the CRN of the desired certificate in the Certificate Manager. Access to the certificate and the associated private key requires a service authorization between the VPC Load Balancer service and the Certificate Manager service.\n\nThese actions can be performed from the web UI, or the IBM Cloud CLI, but in keeping with the example code that is being extended, terraform code to provide the service authorization and listener pool creation is provided in the `tls.tf` file. This file has a placeholder for the CRN of the certificate to be used by the front-end listener. Update the placeholder with these steps.\n\nChange to the `14-certificate-management/order-certificate` directory and obtain the CRN of the ordered certificate:\n\n```bash\nCERT_CRN=$(terraform output ordered-certificate-id)\n```\n\nChange to the `14-certificate-management/vpc-lbaas-certificate` directory and update the placeholder in the `tls.tf` file.\n\n```bash\nsed -i.bak \"s|CERT-CRN|${CERT_CRN}|\" tls.tf && rm tls.tf.bak\n```\n\nAfter running this command, the `tls.tf` file will look like:\n\n```hcl pathname=tls.tf\ndata \"ibm_resource_instance\" \"cm\" {\n    name     = \"iac-certificate-manager\"\n    service  = \"cloudcerts\"\n}\n\nvariable \"certificate_crn\" {\n    default = \"crn:v1:bluemix:public:cloudcerts:us-south:a/06788ee4fd5a4d779f236bbe43f09b4b:d6cad342-cf54-49d3-b5f9-42e842e43c40:certificate:df56720b1dab1db089f73d0fd8d6ad20\"\n}\n\nresource \"ibm_iam_authorization_policy\" \"policy\" {\n  source_service_name           = \"is\"  \n  source_resource_type          = \"load-balancer\"\n  target_service_name           = \"cloudcerts\"\n  roles                          = [\"Writer\"]\n}\n\nresource \"ibm_is_lb_listener\" \"iac_app_lb_listener_tls\" {\n  lb                        = ibm_is_lb.iac_app_lb.id\n  port                      = \"443\"\n  protocol                  = \"https\"\n  certificate_instance      = var.certificate_crn\n  default_pool              = ibm_is_lb_pool.iac_app_lb_pool.id\n}\n\noutput \"load_balancer_host_status\" {\n  value = \"add the host ${ibm_is_lb.iac_app_lb.hostname} as CNAME to the tls host\"\n}\n```\n\nUse this command from the IaC Compute section to add the public key used for SSH connections to the folder for use during the environment creation.\n\n```bash\necho \"public_key = \\\"$(cat ~/.ssh/id_rsa.pub)\\\"\" > secrets.auto.tfvars\n```\n\nNow use terraform to create the environment with compute, load balancer and the HTTPS enabled front-end listener.\n\n```bash\nterraform init \nterraform plan \nterraform apply\n```\n\nWhen the code completes, a message will appear with the hostname of the VPC Load Balancer:\n\n```text\nApply complete! Resources: 29 added, 0 changed, 0 destroyed.\n\nOutputs:\n\nentrypoint = http://8f962775-us-south.lb.appdomain.cloud:8080\nlb_ip_address = [\n  \"52.116.196.98\",\n  \"52.117.1.76\",\n]\nload_balancer_host_status = add the host 8f962775-us-south.lb.appdomain.cloud as CNAME to the tls host\n```\n\n Update the DNS domain name entry in the certificate with a CNAME record that direct to the hostname of the VPC Load Balancer. Once the CNAME is in place, you can access the deployed example application.\n\n```bash\ncurl https://movies.timro.us/movies/675\n{\n  \"id\": \"675\",\n  \"title\": \"Kagemusha\",\n...\n```\n\n## Clean up\n\nTo cleanup all the resources created by the script, run the following:\n\n```bash\nterraform destroy\n```\n\nThis will not delete the Certificate Manager instance or the imported or ordered certificates. Only delete the certificate manager instance if you will not be completing the \"Certificates for Kubernetes\" example.","type":"Mdx","contentDigest":"456298702bdb9c224a0459b80246198f","counter":736,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Deploying certificates to VPC Load Balancers","description":"Loading TLS certificates and private keys to VPC Load Balancer instances","keywords":"tls,vpc load balancer,certificate-manager,security"},"exports":{},"rawBody":"---\ntitle: Deploying certificates to VPC Load Balancers\ndescription: Loading TLS certificates and private keys to VPC Load Balancer instances\nkeywords: 'tls,vpc load balancer,certificate-manager,security'\n---\n\n<!--\n\nThe pattern to document the resources is like follow:\n- Introduce the resource with an example\n- List all or the most important input parameters\n- If will be used, list the most important output parameters\n- Provide instructions to get the value of the input parameters, either using `ibmcloud`, API or the Web console.\n- If needed, instructions to execute the code either with Terraform or Schematics\n\n-->\n\n<PageDescription>\n\nDeploying certificates to VPC Load Balancers\n\n</PageDescription>\n\nThe Certificate Manager service provides support for deploying certificates to multiple IBM Cloud services. This section reviews how to configure access from the VPC Load Balancer service to the Certificate Manager service and add an HTTPS listener to a VPC Load Balancer.\n\nThe example will use the certificate ordered in the [service setup](/certificate-management/service-setup) section. The terraform code from [IaC compute](/iac-resources/compute) will be used to create the vpc, application and load balancer instance.\n\nThe code to manage the creation of the example can be found in the GitHub repository https://github.com/IBM/cloud-enterprise-examples/ in the directory [14-certificate-management/vpc-lbaas-certificate](https://github.com/IBM/cloud-enterprise-examples/tree/master/iac/14-certificate-management/vpc-lbaas-certificate).\n\n<AnchorLinks small>\n  <AnchorLink>Configure VPC Load Balancer HTTPS listener</AnchorLink>\n  <AnchorLink>Clean Up</AnchorLink>\n</AnchorLinks>\n\n<InlineNotification>\n\n**Requirements**\n\nTo be able to execute and complete the instructions in this page, make sure you have an **IBM Cloud account**: if you don't have one yet, you can [create a Lite account](https://cloud.ibm.com/docs/overview?topic=overview-quickstart_lite#prereqs-lite) for free.\n\nThese examples will require an internet DNS domain that is managed by the user or can be used with a domain managed by the IBM Cloud Internet Services service.\n\nAlso make sure you have the environment setup as explained in the [Setup Environment](/iac/setup-environment) page to have installed the IBM Cloud CLI, logged in to your account with the IBM Cloud CLI and set the `IC_API_KEY` environment variable to a key which has the ability to manage IAM configuration.\n\n</InlineNotification>\n\n## Configure VPC Load Balancer HTTPS listener\n\nThe VPC Load Balancer service can terminate and offload processing of [incoming SSL/TLS connections](https://cloud.ibm.com/docs/vpc?topic=vpc-load-balancers#ssl-offloading-and-required-authorizations). In order to do this, a front-end listener pool is defined using the HTTPS protocol and the CRN of the desired certificate in the Certificate Manager. Access to the certificate and the associated private key requires a service authorization between the VPC Load Balancer service and the Certificate Manager service.\n\nThese actions can be performed from the web UI, or the IBM Cloud CLI, but in keeping with the example code that is being extended, terraform code to provide the service authorization and listener pool creation is provided in the `tls.tf` file. This file has a placeholder for the CRN of the certificate to be used by the front-end listener. Update the placeholder with these steps.\n\nChange to the `14-certificate-management/order-certificate` directory and obtain the CRN of the ordered certificate:\n\n```bash\nCERT_CRN=$(terraform output ordered-certificate-id)\n```\n\nChange to the `14-certificate-management/vpc-lbaas-certificate` directory and update the placeholder in the `tls.tf` file.\n\n```bash\nsed -i.bak \"s|CERT-CRN|${CERT_CRN}|\" tls.tf && rm tls.tf.bak\n```\n\nAfter running this command, the `tls.tf` file will look like:\n\n```hcl pathname=tls.tf\ndata \"ibm_resource_instance\" \"cm\" {\n    name     = \"iac-certificate-manager\"\n    service  = \"cloudcerts\"\n}\n\nvariable \"certificate_crn\" {\n    default = \"crn:v1:bluemix:public:cloudcerts:us-south:a/06788ee4fd5a4d779f236bbe43f09b4b:d6cad342-cf54-49d3-b5f9-42e842e43c40:certificate:df56720b1dab1db089f73d0fd8d6ad20\"\n}\n\nresource \"ibm_iam_authorization_policy\" \"policy\" {\n  source_service_name           = \"is\"  \n  source_resource_type          = \"load-balancer\"\n  target_service_name           = \"cloudcerts\"\n  roles                          = [\"Writer\"]\n}\n\nresource \"ibm_is_lb_listener\" \"iac_app_lb_listener_tls\" {\n  lb                        = ibm_is_lb.iac_app_lb.id\n  port                      = \"443\"\n  protocol                  = \"https\"\n  certificate_instance      = var.certificate_crn\n  default_pool              = ibm_is_lb_pool.iac_app_lb_pool.id\n}\n\noutput \"load_balancer_host_status\" {\n  value = \"add the host ${ibm_is_lb.iac_app_lb.hostname} as CNAME to the tls host\"\n}\n```\n\nUse this command from the IaC Compute section to add the public key used for SSH connections to the folder for use during the environment creation.\n\n```bash\necho \"public_key = \\\"$(cat ~/.ssh/id_rsa.pub)\\\"\" > secrets.auto.tfvars\n```\n\nNow use terraform to create the environment with compute, load balancer and the HTTPS enabled front-end listener.\n\n```bash\nterraform init \nterraform plan \nterraform apply\n```\n\nWhen the code completes, a message will appear with the hostname of the VPC Load Balancer:\n\n```text\nApply complete! Resources: 29 added, 0 changed, 0 destroyed.\n\nOutputs:\n\nentrypoint = http://8f962775-us-south.lb.appdomain.cloud:8080\nlb_ip_address = [\n  \"52.116.196.98\",\n  \"52.117.1.76\",\n]\nload_balancer_host_status = add the host 8f962775-us-south.lb.appdomain.cloud as CNAME to the tls host\n```\n\n Update the DNS domain name entry in the certificate with a CNAME record that direct to the hostname of the VPC Load Balancer. Once the CNAME is in place, you can access the deployed example application.\n\n```bash\ncurl https://movies.timro.us/movies/675\n{\n  \"id\": \"675\",\n  \"title\": \"Kagemusha\",\n...\n```\n\n## Clean up\n\nTo cleanup all the resources created by the script, run the following:\n\n```bash\nterraform destroy\n```\n\nThis will not delete the Certificate Manager instance or the imported or ordered certificates. Only delete the certificate manager instance if you will not be completing the \"Certificates for Kubernetes\" example.","fileAbsolutePath":"/Users/isaias/Documents/Projects/Developer_Advocate_Group/CODE_PATTERNS/ibm-asean-enterprise-cloud-patterns/src/pages/certificate-management/deploy-to-vpclb/index.mdx"}}}}