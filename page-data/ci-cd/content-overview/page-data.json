{"componentChunkName":"component---src-pages-ci-cd-content-overview-index-mdx","path":"/ci-cd/content-overview/","result":{"pageContext":{"frontmatter":{"title":"CI/CD Content Overview","description":"CI/CD Content Overview","keywords":"ibm cloud cicd"},"relativePagePath":"/ci-cd/content-overview/index.mdx","titleType":"page","MdxNode":{"id":"b579b19d-b153-5eae-b67d-28fb9fadf2b1","children":[],"parent":"b4c052e7-6400-5689-8336-350ae3983eb6","internal":{"content":"---\ntitle: CI/CD Content Overview\ndescription: CI/CD Content Overview\nkeywords: 'ibm cloud cicd'\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nCI/CD Content Overview\n\n</PageDescription>\n\n<AnchorLinks small>\n  <AnchorLink>IBM Cloud Toolchain for IBM Cloud Schematics</AnchorLink>\n  <AnchorLink>CI/CD to Kubernetes Using IBM Cloud Toolchains</AnchorLink>\n  <AnchorLink>Cloud Native CI/CD with Kubernetes and OpenShift</AnchorLink>\n</AnchorLinks>\n\nThere are multiple options for CI and CD tooling that work with IBM Cloud. A CI/CD solution MUST\n- Deploy to multiple kinds of infrastructure, including bare metal, VSIs, or container based such as Kubernetes or OpenShift\n- Be built around different types of code bases, including infrastructure as code or applications that expose some business function to users.\n- Must integrate with third-party tools for building, testing and artifact storing such as SonarQube, Maven and Artifactory.\n- Must be designed to handle all aspects of the SDLC lifecycle. Failing fast being a key best practice to follow.\n- Must deploy across multiple environments located in different regions and accounts and must integrate with RBAC to protect access to the resources it talks to.\n\n\nIn this overview and the following CI/CD sections, we will introduce a subset of tooling that run on IBM Cloud.\nThis is not to be considered an all-inclusive list, but we will demonstrate the flexiblity and patterns of the tools to solve the requirements of the above list.\n\nWe will show two options for CI/CD tooling: IBM Cloud Toolchain and open-source cloud-native CI/CD tools that run on top of Kubernetes or OpenShift.\nBoth are options that can be used for your IBM Cloud deployments, and there are pros and cons to each approach.\n\n![Paths To ](./images/pathstodevops.png)\n\n## IBM Cloud Toolchain for IBM Cloud Schematics\n\nUse CI/CD for IBM Cloud Schematics to enable a GitOps workflow for your Infrastructure as Code Terraform scripts.\nGet started by following the instructions in [this pattern](/ci-cd/cloud-toolchain-schematics).\n\n## CI/CD to Kubernetes Using IBM Cloud Toolchains\nIBM Cloud Public is an open-standards, cloud-based platform where you can build, run, and manage applications that are accessed by http://cloud.ibm.com.\nThe advantage of using IBM Cloud Toolchain is that it integrates seamlessly with all resources already deployed on IBM Cloud while providing full\nDevOps capabilities provided by the Open Toolchain. There are some built-in features as well such as enabling DevOps Insights to give you aggregate view of all\ntests that are running in your pipeline.\n\nIncluded in the core set of tools for any DevOps toolchain on IBM Cloud: Git Repos and Issue Tracking, Delivery Pipeline, and Eclipse Orion Web IDE.\nGit Repos and Issue Tracking is based on the GitLab Community Edition, and offers planning boards and source code collaboration through merge requests.\nThe Delivery Pipeline orchestrates build, test, and deployment jobs across multiple environments as changes progress from the Developer to production.\nApplications can be deployed in minutes to the Cloud Foundry environment or to a Kubernetes cluster on IBM Cloud, to either public or private clouds.\nThe Eclipse Orion Web IDE gives Developers quick access to the code from any browser.\n\nOpen toolchain integrates more tools around Continuous Delivery such as Slack, Atlassian JIRA, Sonatype Nexus, JFrog Artifactory, Sauce Labs, PagerDuty,\nBM Cloud Availability Monitoring, IBM Vulnerability Advisor, and IBM Globalization Pipeline. You can also substitute other tools for the Continuous Delivery capabilities,\nincluding GitHub, GitHub Enterprise, and Jenkins. Developers can also use their favorite IDEs and editors, such as Visual Studio Code, Eclipse, and more.\n\nIBM Cloud DevOps provides concrete practices and architectures for cloud development.\nIt enables Developers to get started quickly with new projects that employ the rich catalog of services on the IBM Cloud.\nIBM Cloud DevOps also provides Developers an open and integrated set of tools for automating delivery with speed and control.\n\nGo here to learn more about [Continuous Delivery](https://www.ibm.com/cloud/learn/continuous-delivery)\nor to learn more about [IBM Cloud Continuous Dlelivery](https://www.ibm.com/cloud/continuous-delivery).\n\nReady to get started? Go [here](/ci-cd/cloud-toolchain-setup) to get started with setting up a IBM Cloud Toolchain that deploys an application to Kubernetes.\n\n## Cloud Native CI/CD with Kubernetes and OpenShift\n\nAn Overview of what DevSecOps is, and how it can help you\n speed up you cloud native solution delivery\n\nOne of the patterns emerging with development teams is the ability to use [CNCF Tools](https://landscape.cncf.io/) as part of a more open multi cloud CI/CD strategy. This approach is aligning around the Kubernetes platform. The IBM Cloud supports both upstream Kubernetes for advanced cutting edge workloads and Red Hat OpenShift the proven mutli cloud distribution of Kubernetes that can install on IBM Cloud, Azure, AWS, VMWare and on Premise and many more places. This approach removes cloud vendor lock in around CI/CD tools and enables development teams to be more flexible and the target cloud they focus on deploying and developing with.\n\nThere are two patterns from this approach:\n\n- There are a core set of Development Tools that are installed inside the Kubernetes environment with the use of Operators the management and support of these tools can be controlled with centralized operations teams\n- Integration of centralized operations tools like Source Code Management, Artifact Management, Image Management, Logging and Monitoring\n\nThis model enables agile cloud native development teams to execute quickly while also conforming to the enterprise standards required for CI/CD. This pattern also enable the reduction of costs of managing expensive centralized multi tenant CI services and enables the development teams to use a percentage of their development cluster to support CI activities. This approach with Tekton enable the centralized operations teams to impose specific pipeline tasks that need to be supported by development teams without the complex\n\n### Overview\n\nThis short video introduces the cloud native concepts of CI/CD DevOps with <Globals name=\"ocp\" />:\n<iframe width=\"80%\" height=\"500\" src=\"https://www.youtube.com/embed/GOPWObjFTsI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<p></p>\n\nEach Cluster can have a selection of CNCF DevSecOps tools installed using IasC(Infrastrcture As Code) using Terraform. The cluster then turns from a production state cluster into a cluster that is used for multi tenant development teams.\n\nThe following describes the requirements:\n\n- **Installation**: Install the CNCF Tools using Terraform this create a new <Globals name=\"env\" />\n- **Cluster**: A <Globals name=\"kube\" /> or <Globals name=\"ocp\" /> cluster that both hosts the tools and itself is a deployment target for application builds\n- **Software Delivery Lifecycle**: Deployment target environments that support the application development lifecycle: *dev*, *test*, and *staging*\n- **Backend services**: Cloud services commonly required by cloud-native applications for monitoring, security, and persistence\n- **CI/CD**: A prebuilt, ready-to-run continuous delivery pipeline incorporating best-of-breed open source software tools supporting `Jenkins`, `Tekton` for CI and `ArgoCD` for CD\n- **<Globals name=\"templates\" />**: Prebuilt code templates for common application components and tasks incorporating best practices that developers can add to their codebase as needed\n- **Dashboard**: Integration of the tools into the OpenShift dashboard, and a centralized developer dashboard to help developers use the environment's capabilities\n\nA core set of tools are sourced from the [IBM Cloud Catalog](https://cloud.ibm.com/catalog?search=label%3Ahelm#software) that can be found in the <Globals name=\"ic\" />. This approach helps assemble these reliable open source development tools into an end-to-end developer experience that is fully integrated with <Globals name=\"ic\" />'s managed container orchestration services.\n\nthe tools can also be source from the [Operator Hub](https://operatorhub.io/) and the [Redhat Marketplace](https://marketplace.redhat.com/en-us). The Operations team that owns the IasC can decide the best approach to install the tools either using **Helm3** or **Operators**\n\nTypically a **Cloud System Admin** installs and sets up a new <Globals name=\"env\" />, providing a place for the developers to start developing the [minimum viable product (MVP)](https://www.ibm.com/garage/method/practices/think/inception/practice_minimum_viable_product). The objective is to reduce the time required for a team to configure and prepare their development environment. The key benefit is to make the end-to-end [CI/CD development lifecycle](https://www.ibm.com/garage/method/practices/deliver/practice_continuous_delivery/) consistent across each platform and make the out-of-the-box developer experience as simple as possible.\n\nThe installation is performed using [Terraform](https://cloud.ibm.com/docs/terraform), driven by scripts with a [modular configuration](https://github.com/ibm-garage-cloud/garage-terraform-modules) so unneeded tools can be easily disabled or new tools added. The combination of tools selected are proven in the industry to deliver real value for modern cloud-native development.\n\n### Environment components\n\nAfter installation, the <Globals name=\"env\" /> consists of a set of CNCF tools installed into your nominated kubernetes cluster.\n\nThis diagram illustrates the <Globals name=\"env\" />:\n\n![Provisioned CNCF Tools](./images/cncf-tools-environment.png)\n\nThe diagram shows the components in the environment: the cluster, the deployment target environments, the cloud services, and the tools.\n\n- An [<Globals key=\"iks\" />](https://www.ibm.com/cloud/container-service)\nor [<Globals key=\"roks\" />](https://www.ibm.com/cloud/openshift) 3-node cluster\n- Cluster namespace that encapsulates the tooling installed in the cluster: *tools*\n- Cluster namespaces for deployment target environments: *dev*, *test*, and *staging*\n\n#### CNCF DevOps Tools\n\nThe following best-of-breed open source software tools are installed in the cluster's *tools* namespace:\n\n| Capability                  | Tool                                         | Bitnami   |Description |\n| --------------------------- |:--------------                               | -------   |------------|\n| Continuous Integration      | [Jenkins CI](https://jenkins.io/)            |  Yes      | Jenkins is a common tool for Continuous Integration   |\n| Continuous Integration      | [Tekton CI](https://tekton.dev/)             |           | Tekton is an emerging tool for Continuous Integration with Kubernetes and OpenShift  |\n| Code Analysis               | [SonarQube](https://www.sonarqube.org/)      |  Yes      | SonarQube can scan code and display the results in a dashboard |\n| Artifact and Helm Storage   | [Artifactory](https://jfrog.com/open-source/)|  Yes      | Artifactory is an artifact storage and Helm chart repository  |\n| Continuous Deployment       | [Argo CD](https://argoproj.github.io/argo-cd/)|           | ArgoCD support Continuous Delivery with GitOps |\n| Contract API Testing        | [Pact](https://docs.pact.io/)                |           | Pact enables API contract testing |\n| End to End Tracing          | [Jeager](https://www.jaegertracing.io/)                |           | Monitor and troubleshoot transactions in complex distributed system |\n\n<Tabs>\n\n<Tab label=\"Setup\">\n\n## Configuration Instructions\n\nTo install the CNCF tools into your nominated kubernetes cluster follow the steps below:\n\n| Task                            | Description         | Link        | Time    |\n| --------------------------------| ------------------  |:----------- |---------|\n| Software Delivery Lifecycle | Overview of the Tools you will be using with the Sandbox |  <a href=\"https://www.youtube.com/watch?v=LcWboN1T7Zk\" target=\"_newwindow\">Video</a>| 30 min |\n| Install Tools | Install CNCF DevOps tools with Schematics  | [Schematics Install](/ci-cd/cloud-native-setup) | 15 mins |\n| Install Dev Tools | Install Pre Prerequisites Client Developer Tools | [Install Dev Tools](/ci-cd/cloud-native-setup-tools) | 30 mins |\n| Continuous Integration | Understand how Jenkins and Tekton support Continuous Integration  | [CI Tools](/ci-cd/cloud-native-ci-tools) | 15 mins |\n| Deploy Application | Understand how to Deploy an App with CI pipeline that enables testing  | [Deploy App](/ci-cd/cloud-native-deploy) | 15 mins |\n| Continuous Delivery | Understand how to enable Continuous Delivery | [CD Tools](/ci-cd/cloud-native-cd) | 15 mins |\n| Code Patterns | Starter code to enable fast on ramp for developers | [Code Patterns](/ci-cd/cloud-native-codepatterns) |\n\n\n</Tab>\n</Tabs>\n\n\n","type":"Mdx","contentDigest":"ec724e08b1ba67af51ef50dc2fa9fa89","counter":767,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"CI/CD Content Overview","description":"CI/CD Content Overview","keywords":"ibm cloud cicd"},"exports":{},"rawBody":"---\ntitle: CI/CD Content Overview\ndescription: CI/CD Content Overview\nkeywords: 'ibm cloud cicd'\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nCI/CD Content Overview\n\n</PageDescription>\n\n<AnchorLinks small>\n  <AnchorLink>IBM Cloud Toolchain for IBM Cloud Schematics</AnchorLink>\n  <AnchorLink>CI/CD to Kubernetes Using IBM Cloud Toolchains</AnchorLink>\n  <AnchorLink>Cloud Native CI/CD with Kubernetes and OpenShift</AnchorLink>\n</AnchorLinks>\n\nThere are multiple options for CI and CD tooling that work with IBM Cloud. A CI/CD solution MUST\n- Deploy to multiple kinds of infrastructure, including bare metal, VSIs, or container based such as Kubernetes or OpenShift\n- Be built around different types of code bases, including infrastructure as code or applications that expose some business function to users.\n- Must integrate with third-party tools for building, testing and artifact storing such as SonarQube, Maven and Artifactory.\n- Must be designed to handle all aspects of the SDLC lifecycle. Failing fast being a key best practice to follow.\n- Must deploy across multiple environments located in different regions and accounts and must integrate with RBAC to protect access to the resources it talks to.\n\n\nIn this overview and the following CI/CD sections, we will introduce a subset of tooling that run on IBM Cloud.\nThis is not to be considered an all-inclusive list, but we will demonstrate the flexiblity and patterns of the tools to solve the requirements of the above list.\n\nWe will show two options for CI/CD tooling: IBM Cloud Toolchain and open-source cloud-native CI/CD tools that run on top of Kubernetes or OpenShift.\nBoth are options that can be used for your IBM Cloud deployments, and there are pros and cons to each approach.\n\n![Paths To ](./images/pathstodevops.png)\n\n## IBM Cloud Toolchain for IBM Cloud Schematics\n\nUse CI/CD for IBM Cloud Schematics to enable a GitOps workflow for your Infrastructure as Code Terraform scripts.\nGet started by following the instructions in [this pattern](/ci-cd/cloud-toolchain-schematics).\n\n## CI/CD to Kubernetes Using IBM Cloud Toolchains\nIBM Cloud Public is an open-standards, cloud-based platform where you can build, run, and manage applications that are accessed by http://cloud.ibm.com.\nThe advantage of using IBM Cloud Toolchain is that it integrates seamlessly with all resources already deployed on IBM Cloud while providing full\nDevOps capabilities provided by the Open Toolchain. There are some built-in features as well such as enabling DevOps Insights to give you aggregate view of all\ntests that are running in your pipeline.\n\nIncluded in the core set of tools for any DevOps toolchain on IBM Cloud: Git Repos and Issue Tracking, Delivery Pipeline, and Eclipse Orion Web IDE.\nGit Repos and Issue Tracking is based on the GitLab Community Edition, and offers planning boards and source code collaboration through merge requests.\nThe Delivery Pipeline orchestrates build, test, and deployment jobs across multiple environments as changes progress from the Developer to production.\nApplications can be deployed in minutes to the Cloud Foundry environment or to a Kubernetes cluster on IBM Cloud, to either public or private clouds.\nThe Eclipse Orion Web IDE gives Developers quick access to the code from any browser.\n\nOpen toolchain integrates more tools around Continuous Delivery such as Slack, Atlassian JIRA, Sonatype Nexus, JFrog Artifactory, Sauce Labs, PagerDuty,\nBM Cloud Availability Monitoring, IBM Vulnerability Advisor, and IBM Globalization Pipeline. You can also substitute other tools for the Continuous Delivery capabilities,\nincluding GitHub, GitHub Enterprise, and Jenkins. Developers can also use their favorite IDEs and editors, such as Visual Studio Code, Eclipse, and more.\n\nIBM Cloud DevOps provides concrete practices and architectures for cloud development.\nIt enables Developers to get started quickly with new projects that employ the rich catalog of services on the IBM Cloud.\nIBM Cloud DevOps also provides Developers an open and integrated set of tools for automating delivery with speed and control.\n\nGo here to learn more about [Continuous Delivery](https://www.ibm.com/cloud/learn/continuous-delivery)\nor to learn more about [IBM Cloud Continuous Dlelivery](https://www.ibm.com/cloud/continuous-delivery).\n\nReady to get started? Go [here](/ci-cd/cloud-toolchain-setup) to get started with setting up a IBM Cloud Toolchain that deploys an application to Kubernetes.\n\n## Cloud Native CI/CD with Kubernetes and OpenShift\n\nAn Overview of what DevSecOps is, and how it can help you\n speed up you cloud native solution delivery\n\nOne of the patterns emerging with development teams is the ability to use [CNCF Tools](https://landscape.cncf.io/) as part of a more open multi cloud CI/CD strategy. This approach is aligning around the Kubernetes platform. The IBM Cloud supports both upstream Kubernetes for advanced cutting edge workloads and Red Hat OpenShift the proven mutli cloud distribution of Kubernetes that can install on IBM Cloud, Azure, AWS, VMWare and on Premise and many more places. This approach removes cloud vendor lock in around CI/CD tools and enables development teams to be more flexible and the target cloud they focus on deploying and developing with.\n\nThere are two patterns from this approach:\n\n- There are a core set of Development Tools that are installed inside the Kubernetes environment with the use of Operators the management and support of these tools can be controlled with centralized operations teams\n- Integration of centralized operations tools like Source Code Management, Artifact Management, Image Management, Logging and Monitoring\n\nThis model enables agile cloud native development teams to execute quickly while also conforming to the enterprise standards required for CI/CD. This pattern also enable the reduction of costs of managing expensive centralized multi tenant CI services and enables the development teams to use a percentage of their development cluster to support CI activities. This approach with Tekton enable the centralized operations teams to impose specific pipeline tasks that need to be supported by development teams without the complex\n\n### Overview\n\nThis short video introduces the cloud native concepts of CI/CD DevOps with <Globals name=\"ocp\" />:\n<iframe width=\"80%\" height=\"500\" src=\"https://www.youtube.com/embed/GOPWObjFTsI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<p></p>\n\nEach Cluster can have a selection of CNCF DevSecOps tools installed using IasC(Infrastrcture As Code) using Terraform. The cluster then turns from a production state cluster into a cluster that is used for multi tenant development teams.\n\nThe following describes the requirements:\n\n- **Installation**: Install the CNCF Tools using Terraform this create a new <Globals name=\"env\" />\n- **Cluster**: A <Globals name=\"kube\" /> or <Globals name=\"ocp\" /> cluster that both hosts the tools and itself is a deployment target for application builds\n- **Software Delivery Lifecycle**: Deployment target environments that support the application development lifecycle: *dev*, *test*, and *staging*\n- **Backend services**: Cloud services commonly required by cloud-native applications for monitoring, security, and persistence\n- **CI/CD**: A prebuilt, ready-to-run continuous delivery pipeline incorporating best-of-breed open source software tools supporting `Jenkins`, `Tekton` for CI and `ArgoCD` for CD\n- **<Globals name=\"templates\" />**: Prebuilt code templates for common application components and tasks incorporating best practices that developers can add to their codebase as needed\n- **Dashboard**: Integration of the tools into the OpenShift dashboard, and a centralized developer dashboard to help developers use the environment's capabilities\n\nA core set of tools are sourced from the [IBM Cloud Catalog](https://cloud.ibm.com/catalog?search=label%3Ahelm#software) that can be found in the <Globals name=\"ic\" />. This approach helps assemble these reliable open source development tools into an end-to-end developer experience that is fully integrated with <Globals name=\"ic\" />'s managed container orchestration services.\n\nthe tools can also be source from the [Operator Hub](https://operatorhub.io/) and the [Redhat Marketplace](https://marketplace.redhat.com/en-us). The Operations team that owns the IasC can decide the best approach to install the tools either using **Helm3** or **Operators**\n\nTypically a **Cloud System Admin** installs and sets up a new <Globals name=\"env\" />, providing a place for the developers to start developing the [minimum viable product (MVP)](https://www.ibm.com/garage/method/practices/think/inception/practice_minimum_viable_product). The objective is to reduce the time required for a team to configure and prepare their development environment. The key benefit is to make the end-to-end [CI/CD development lifecycle](https://www.ibm.com/garage/method/practices/deliver/practice_continuous_delivery/) consistent across each platform and make the out-of-the-box developer experience as simple as possible.\n\nThe installation is performed using [Terraform](https://cloud.ibm.com/docs/terraform), driven by scripts with a [modular configuration](https://github.com/ibm-garage-cloud/garage-terraform-modules) so unneeded tools can be easily disabled or new tools added. The combination of tools selected are proven in the industry to deliver real value for modern cloud-native development.\n\n### Environment components\n\nAfter installation, the <Globals name=\"env\" /> consists of a set of CNCF tools installed into your nominated kubernetes cluster.\n\nThis diagram illustrates the <Globals name=\"env\" />:\n\n![Provisioned CNCF Tools](./images/cncf-tools-environment.png)\n\nThe diagram shows the components in the environment: the cluster, the deployment target environments, the cloud services, and the tools.\n\n- An [<Globals key=\"iks\" />](https://www.ibm.com/cloud/container-service)\nor [<Globals key=\"roks\" />](https://www.ibm.com/cloud/openshift) 3-node cluster\n- Cluster namespace that encapsulates the tooling installed in the cluster: *tools*\n- Cluster namespaces for deployment target environments: *dev*, *test*, and *staging*\n\n#### CNCF DevOps Tools\n\nThe following best-of-breed open source software tools are installed in the cluster's *tools* namespace:\n\n| Capability                  | Tool                                         | Bitnami   |Description |\n| --------------------------- |:--------------                               | -------   |------------|\n| Continuous Integration      | [Jenkins CI](https://jenkins.io/)            |  Yes      | Jenkins is a common tool for Continuous Integration   |\n| Continuous Integration      | [Tekton CI](https://tekton.dev/)             |           | Tekton is an emerging tool for Continuous Integration with Kubernetes and OpenShift  |\n| Code Analysis               | [SonarQube](https://www.sonarqube.org/)      |  Yes      | SonarQube can scan code and display the results in a dashboard |\n| Artifact and Helm Storage   | [Artifactory](https://jfrog.com/open-source/)|  Yes      | Artifactory is an artifact storage and Helm chart repository  |\n| Continuous Deployment       | [Argo CD](https://argoproj.github.io/argo-cd/)|           | ArgoCD support Continuous Delivery with GitOps |\n| Contract API Testing        | [Pact](https://docs.pact.io/)                |           | Pact enables API contract testing |\n| End to End Tracing          | [Jeager](https://www.jaegertracing.io/)                |           | Monitor and troubleshoot transactions in complex distributed system |\n\n<Tabs>\n\n<Tab label=\"Setup\">\n\n## Configuration Instructions\n\nTo install the CNCF tools into your nominated kubernetes cluster follow the steps below:\n\n| Task                            | Description         | Link        | Time    |\n| --------------------------------| ------------------  |:----------- |---------|\n| Software Delivery Lifecycle | Overview of the Tools you will be using with the Sandbox |  <a href=\"https://www.youtube.com/watch?v=LcWboN1T7Zk\" target=\"_newwindow\">Video</a>| 30 min |\n| Install Tools | Install CNCF DevOps tools with Schematics  | [Schematics Install](/ci-cd/cloud-native-setup) | 15 mins |\n| Install Dev Tools | Install Pre Prerequisites Client Developer Tools | [Install Dev Tools](/ci-cd/cloud-native-setup-tools) | 30 mins |\n| Continuous Integration | Understand how Jenkins and Tekton support Continuous Integration  | [CI Tools](/ci-cd/cloud-native-ci-tools) | 15 mins |\n| Deploy Application | Understand how to Deploy an App with CI pipeline that enables testing  | [Deploy App](/ci-cd/cloud-native-deploy) | 15 mins |\n| Continuous Delivery | Understand how to enable Continuous Delivery | [CD Tools](/ci-cd/cloud-native-cd) | 15 mins |\n| Code Patterns | Starter code to enable fast on ramp for developers | [Code Patterns](/ci-cd/cloud-native-codepatterns) |\n\n\n</Tab>\n</Tabs>\n\n\n","fileAbsolutePath":"/Users/isaias/Documents/Projects/Developer_Advocate_Group/CODE_PATTERNS/ibm-asean-enterprise-cloud-patterns/src/pages/ci-cd/content-overview/index.mdx"}}}}