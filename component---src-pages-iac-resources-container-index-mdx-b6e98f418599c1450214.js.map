{"version":3,"sources":["webpack:///./src/pages/iac-resources/container/index.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","small","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-iac-resources-container-index-mdx-b6e98f418599c1450214.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/isaias/Documents/Projects/Developer_Advocate_Group/CODE_PATTERNS/ibm-asean-enterprise-cloud-patterns/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Automating the management of container services on IBM Cloud including the Container Registry and Kubernetes Services (IKS)`}</p>\n    </PageDescription>\n    <AnchorLinks small mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Prerequisites</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">IBM Cloud Container Registry</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">IBM Cloud Kubernetes Service</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">IKS with Terraform</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">IKS with IBM Cloud Schematics</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Deploy the Application</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Persistent Volumes</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">External IBM Cloud Database</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Deployment Troubleshooting</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Final Code</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Clean up</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Prerequisites`}</h2>\n    <p>{`The steps in this pattern require the local workstation to be configured with the IBM Cloud CLI, CLI plugins for `}<inlineCode parentName=\"p\">{`container-service`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`container-registry`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`schematics`}</inlineCode>{`, the Terraform CLI, IBM Terrraform provider and a local installation of `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.docker.com/get-docker/\"\n      }}>{`Docker`}</a>{` . For more details on setting up the various CLI environments, see the `}<a parentName=\"p\" {...{\n        \"href\": \"/iac/setup-environment\"\n      }}>{`Setup Environment`}</a>{` chapter.`}</p>\n    <h2>{`IBM Cloud Container Registry`}</h2>\n    <p>{`IBM Cloud Container Registry (ICR) is used to store, manage and deploy private container images in a highly available and scalable architecture. You can also set up your own image namespace and push container images to them. To learn more, see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.ibm.com/docs/Registry?topic=Registry-getting-started\"\n      }}>{`Container Registry`}</a>{` documentation. There are no specific IaC steps required to enable the Container Registry, this is a capablity that is available to an IBM Cloud account without performing a service creation task.`}</p>\n    <p>{`Container images for IBM Cloud follow the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.opencontainers.org/\"\n      }}>{`Open Container Initiative`}</a>{` (OCI) standards to provide interoperability and flexibility in tooling for the container lifecycle. One well known tool for createing OCI-compliant images is `}<inlineCode parentName=\"p\">{`docker`}</inlineCode>{` which will be used for the examples in this pattern.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`docker`}</inlineCode>{` command creates an image from a `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{`, which contains instructions to build the image. A `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` might reference build artifacts in its instructions that are stored separately, such as an app, the app’s configuration, and its dependencies. Images are typically stored in a registry that can either be accessible by the public (public registry) or set up with limited access for a small group of users (private registry). By using IBM Cloud Container Registry, only users with access to your IBM Cloud account through IAM can access your images.`}</p>\n    <p>{`Continue using the same application from the previous patterns in order to have a simple container image that can be used with the IBM Container Registry and Kubernetes service. Create the first version of a `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` with the following content in the directory `}<inlineCode parentName=\"p\">{`docker/1.0/`}</inlineCode>{` on this project.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Dockerfile\",\n        \"metastring\": \"path=docker/1.0/Dockerfile\",\n        \"path\": \"docker/1.0/Dockerfile\"\n      }}>{`FROM node:13\n\nCOPY ./data/v1 /data\nRUN npm install -g json-server\n\nWORKDIR /app\n\nEXPOSE 8080\n\nCMD [ \"json-server\", \"--watch\", \"/data/db.min.json\", \"--port\", \"8080\", \"--host\", \"0.0.0.0\" ]\n`}</code></pre>\n    <p>{`Copy to the `}<inlineCode parentName=\"p\">{`data/v1`}</inlineCode>{` folder the JSON database file `}<inlineCode parentName=\"p\">{`db.min.json`}</inlineCode>{` from the previous patterns. Now, build and test the container image locally using the `}<inlineCode parentName=\"p\">{`docker`}</inlineCode>{` command, the Dockerfile in `}<inlineCode parentName=\"p\">{`docker/1.0/`}</inlineCode>{` using the current directory as context because it needs the `}<inlineCode parentName=\"p\">{`data/v1/`}</inlineCode>{` directory with the JSON database.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker build -t movies:1.0 -f docker/1.0/Dockerfile .\ndocker images\n\ndocker run --name movies -d --rm -p 80:8080 -v $PWD/data/v1:/data movies:1.0\n\ncurl http://localhost/movies/675\n\ndocker stop $(docker ps -q --filter name=movies)\n`}</code></pre>\n    <p>{`To create an Container Registry namespace, use the IBM Cloud CLI with the `}<inlineCode parentName=\"p\">{`container-registry`}</inlineCode>{` plugin. Make sure you have the latest version installed and you have `}<a parentName=\"p\" {...{\n        \"href\": \"/iac/setup-environment\"\n      }}>{`setup the environment`}</a>{` correctly. Namespace names (like Docker Hub and other container repositories) must be unique for a container registry region, so substitute the name shown here with a unique one of your choosing.`}</p>\n    <p>{`The sub-command `}<inlineCode parentName=\"p\">{`namespace-add`}</inlineCode>{` will create the new namespace. The examples that follow will use `}<inlineCode parentName=\"p\">{`iac-registry`}</inlineCode>{` as the namespace:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ibmcloud cr namespace-list\nibmcloud cr namespace-add iac-registry\n`}</code></pre>\n    <p>{`In order to push your local OCI image to the namespace registry, it must be tagged as: `}<inlineCode parentName=\"p\">{`REGION.icr.io/NAMESPACE/IMAGE:TAG`}</inlineCode>{`. Use the sub-command `}<inlineCode parentName=\"p\">{`region`}</inlineCode>{` to find the registry region you are targeting:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ibmcloud cr region\n`}</code></pre>\n    <p>{`Continuing with the example, the region is `}<inlineCode parentName=\"p\">{`us`}</inlineCode>{` so the registry is `}<inlineCode parentName=\"p\">{`us.icr.io`}</inlineCode>{`. The namespace is `}<inlineCode parentName=\"p\">{`iac-registry`}</inlineCode>{`, the image name is `}<inlineCode parentName=\"p\">{`movies`}</inlineCode>{` and the version tag `}<inlineCode parentName=\"p\">{`1.0`}</inlineCode>{`. The full tag would be: `}<inlineCode parentName=\"p\">{`us.icr.io/iac-registry/movies:1.0`}</inlineCode>{`. The image has already been created with the tag `}<inlineCode parentName=\"p\">{`movies`}</inlineCode>{` so to update, use the docker `}<inlineCode parentName=\"p\">{`tag`}</inlineCode>{` command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker images\ndocker tag movies us.icr.io/iac-registry/movies:1.0\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Image tags`}</strong></p>\n      <p>{`Visit the `}<a parentName=\"p\" {...{\n          \"href\": \"https://docs.docker.com/engine/reference/commandline/tag/\"\n        }}>{`Docker tag`}</a>{` documentation to find our more about image tags`}</p>\n    </InlineNotification>\n    <p>{`Before pushing the image to the registry it’s required to login with the IBM Cloud CLI `}<inlineCode parentName=\"p\">{`login`}</inlineCode>{` sub-command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ibmcloud cr login\n`}</code></pre>\n    <p>{`This command will set up the local `}<inlineCode parentName=\"p\">{`docker`}</inlineCode>{` CLI with a credentials object that allows it to communicate to the namespaces defined for your account in the current container registry region. After logging in, push the image with the Docker command `}<inlineCode parentName=\"p\">{`push`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker push us.icr.io/iac-registry/movies:1.0\n`}</code></pre>\n    <p>{`You can check the image in the registry in different ways: (1) listing the images in the registry with the `}<inlineCode parentName=\"p\">{`ibmcloud cr images`}</inlineCode>{` command, or (2) using the `}<inlineCode parentName=\"p\">{`docker`}</inlineCode>{` command to pull the image, either from a different computer or locally deleting the image and pulling it down from the registry:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Option 1:\nibmcloud cr images --restrict iac-registry\n\n# Option 2:\ndocker rmi us.icr.io/iac-registry/movies:1.0\ndocker pull us.icr.io/iac-registry/movies:1.0\ndocker images\n`}</code></pre>\n    <p>{`With the container image uploaded to the IBM Container Registry, you will be able to create Kubernetes deployments of the image by specifying the path to the fully qualified tag name `}<inlineCode parentName=\"p\">{`us.icr.io/iac-registry/movies:1.0`}</inlineCode>{` . Before doing this, you will need to create an IKS cluster.`}</p>\n    <h2>{`IBM Cloud Kubernetes Service`}</h2>\n    <p>{`IBM Cloud Kubernetes Service (IKS) is a managed offering providing dedicated Kubernetes clusters to deploy and manage containerized apps. In this section you will create a Kubernetes cluster and deploy a simple API application. Examples will be provided using IBM Cloud CLI, Terraform and Schematics. The scope of this section is to cover creation of clusters and simple application deployment using IaC techniques. It will not cover deeper details for managing Kubernetes resources in general or broadly managing Kubernetes and deployments.`}</p>\n    <p>{`To create a Kubernetes cluster using the IBM Cloud CLI you need to specify parameters such as zone and worker node flavor. Discover these using the following commands. In this example, we are using Zone `}<inlineCode parentName=\"p\">{`us-south-1`}</inlineCode>{` and worker node flavor `}<inlineCode parentName=\"p\">{`mx2.4x32`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ibmcloud ks zone ls --provider vpc-gen2 --show-flavors\nZONE=us-south-1\n\nibmcloud ks flavors --provider vpc-gen2 --zone $ZONE\nFLAVOR=mx2.4x32\n`}</code></pre>\n    <p>{`You also need a VPC and Subnet for the Kubernetes cluster. If they do not yet exist, they may be created using the IBM Cloud CLI:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# VPC Name: iac-iks-vpc\nibmcloud is vpc-create iac-iks-vpc\nVPC_ID=$(ibmcloud is vpcs --json | jq -r \".[] | select(.name==\\\\\"iac-iks-vpc\\\\\").id\")\n\n# Subnet Name: iac-iks-subnet with 16 IP addresses.\nibmcloud is subnet-create iac-iks-subnet $VPC_ID --zone $ZONE --ipv4-address-count 16\nSUBNET_ID=$(ibmcloud is subnets --json | jq -r \".[] | select(.name==\\\\\"iac-iks-subnet\\\\\").id\")\n`}</code></pre>\n    <p>{`After the VPC is created, the default security group will not have network access rules needed by the load balancers of the Kubernetes service to talk to the ingress controllers or other applications deployed as NodePort services. Update the default security group by adding the following rule.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`DEFAULT_SG_ID=$(ibmcloud is vpc-default-security-group $VPC_ID --json | jq -r \".id\")\n\nibmcloud is security-group-rule-add $DEFAULT_SG_ID inbound tcp --port-min 30000 --port-max 32767\n`}</code></pre>\n    <p>{`If you already have a VPC and Subnets, get their IDs with the following `}<inlineCode parentName=\"p\">{`ibmcloud ks`}</inlineCode>{` sub-commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ibmcloud ks vpcs --provider vpc-gen2        # VPC Name: iac-iks-vpc\nVPC_ID=$(ibmcloud ks vpcs --provider vpc-gen2 --json | jq -r '.[] | select(.name==\"iac-iks-vpc\").id')\n\nibmcloud ks subnets --provider vpc-gen2 --vpc-id $VPC_ID --zone $ZONE   # Subnet Name: iac-iks-subnet\nSUBNET_ID=$(ibmcloud ks subnets --provider vpc-gen2 --vpc-id $VPC_ID --zone $ZONE --json | jq -r '.[] | select(.name==\"iac-iks-subnet\").id')\n`}</code></pre>\n    <p>{`The available Kubernetes versions to install are listed with the command `}<inlineCode parentName=\"p\">{`ibmcloud ks versions`}</inlineCode>{`. For IKS on Gen2, use a kubernetes cluster version > `}<inlineCode parentName=\"p\">{`1.18`}</inlineCode>{`. With all input parameters defined, including a name and Kubernetes veyou are ready to create the cluster using the `}<inlineCode parentName=\"p\">{`cluster create`}</inlineCode>{` sub-command, like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`NAME=iac-iks-cluster\nVERSION=1.18.3\n\nibmcloud ks cluster create vpc-gen2 \\\\\n  --name $NAME \\\\\n  --zone $ZONE \\\\\n  --vpc-id $VPC_ID \\\\\n  --subnet-id $SUBNET_ID \\\\\n  --flavor $FLAVOR \\\\\n  --version $VERSION \\\\\n  # --workers $N \\\\\n  # --entitlement cloud_pak \\\\\n  # --service-subnet $SUBNET_CIDR \\\\\n  # --pod-subnet $POD_CIDR \\\\\n  # --disable-public-service-endpoint \\\\\n`}</code></pre>\n    <p>{`The default values for the optional parameters are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`N`}</inlineCode>{`: 1, this is a one worker node cluster.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SUBNET_CIDR`}</inlineCode>{`: 172.21.0.0/16`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`POD_CIDR`}</inlineCode>{`: 172.30.0.0/16`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`disable-public-service-endpoint`}</inlineCode>{`: false`}</li>\n    </ul>\n    <p>{`To identify your Kubernetes cluster status use the command `}<inlineCode parentName=\"p\">{`ibmcloud ks clusters`}</inlineCode>{`, wait a few minutes to have it up and running.`}</p>\n    <p>{`When the Kubernetes cluster state is `}<inlineCode parentName=\"p\">{`normal`}</inlineCode>{` get the configuration to access the cluster using the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ibmcloud ks cluster config --cluster $NAME\n`}</code></pre>\n    <p>{`Now you are ready to use the `}<inlineCode parentName=\"p\">{`kubectl`}</inlineCode>{` command, these are some initial commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl cluster-info\nkubectl get nodes\n`}</code></pre>\n    <p>{`You can obtain more information of the cluster with the commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ibmcloud ks worker ls --cluster $NAME\nibmcloud ks cluster get --cluster $NAME\n`}</code></pre>\n    <p>{`To know more read the `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.ibm.com/docs/containers?topic=containers-getting-started\"\n      }}>{`Kubernetes Service (IKS)`}</a>{` documentation.`}</p>\n    <h2>{`IKS with Terraform`}</h2>\n    <p>{`All the same actions executed with the IBM Cloud CLI has to be done with Terraform, lets create a new `}<inlineCode parentName=\"p\">{`main.tf`}</inlineCode>{` file with the IBM Provisioner using Gen 2, the given region and the data source to get the info of the user selected resource group.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=main.tf\",\n        \"path\": \"main.tf\"\n      }}>{`provider \"ibm\" {\n  generation = 2\n  region     = var.region\n}\n\ndata \"ibm_resource_group\" \"group\" {\n  name = var.resource_group\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`variables.tf`}</inlineCode>{` file defines the required variables above, the project name and environment to use them as prefix to name the resources, the code would be like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=variables.tf\",\n        \"path\": \"variables.tf\"\n      }}>{`variable \"project_name\" {}\nvariable \"environment\" {}\n\nvariable \"resource_group\" {\n  default = \"Default\"\n}\nvariable \"region\" {\n  default = \"us-south\"\n}\n`}</code></pre>\n    <p>{`To not have to enter the variables every time we execute terraform, lets add some variables value to the `}<inlineCode parentName=\"p\">{`terraform.tfvars`}</inlineCode>{` file. Make sure this file is appended to the `}<inlineCode parentName=\"p\">{`.gitignore`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=terraform.tfvars\",\n        \"path\": \"terraform.tfvars\"\n      }}>{`project_name = \"iac-iks-test\"\nenvironment  = \"dev\"\n\n# Optional variables\nresource_group = \"Default\"\nregion         = \"us-south\"\n`}</code></pre>\n    <p>{`The IKS clusters needs a VPC, Subnet(s) and Security Group Rules(s) added to the default security group of the VPC. Just like we did using the IBM Cloud CLI let’s create them allowing inbound traffic to ports 30000 - 32767 for the security group rules. Same as you did on `}<a parentName=\"p\" {...{\n        \"href\": \"/iac-resources/network\"\n      }}>{`Network`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/iac-resources/compute\"\n      }}>{`Compute`}</a>{` the number of subnets is defined by the number of zones provided by the user. Lets code this in the `}<inlineCode parentName=\"p\">{`network.tf`}</inlineCode>{` file and append the following variables to `}<inlineCode parentName=\"p\">{`variables.tf`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=network.tf\",\n        \"path\": \"network.tf\"\n      }}>{`resource \"ibm_is_vpc\" \"iac_iks_vpc\" {\n  name = \"\\${var.project_name}-\\${var.environment}-vpc\"\n}\n\nresource \"ibm_is_subnet\" \"iac_iks_subnet\" {\n  count                    = local.max_size\n  name                     = \"\\${var.project_name}-\\${var.environment}-subnet-\\${format(\"%02s\", count.index)}\"\n  zone                     = var.vpc_zone_names[count.index]\n  vpc                      = ibm_is_vpc.iac_iks_vpc.id\n  total_ipv4_address_count = 256\n  resource_group           = data.ibm_resource_group.group.id\n}\n\nresource \"ibm_is_security_group_rule\" \"iac_iks_security_group_rule_tcp_k8s\" {\n  count     = local.max_size\n  group     = ibm_is_vpc.iac_iks_vpc.default_security_group\n  direction = \"inbound\"\n  remote    = ibm_is_subnet.iac_iks_subnet[count.index].ipv4_cidr_block\n\n  tcp {\n    port_min = 30000\n    port_max = 32767\n  }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=variables.tf\",\n        \"path\": \"variables.tf\"\n      }}>{`  ...\nvariable \"vpc_zone_names\" {\n  type    = list(string)\n  default = [\"us-south-1\", \"us-south-2\", \"us-south-3\"]\n}\n\nlocals {\n  max_size = length(var.vpc_zone_names)\n}\n`}</code></pre>\n    <p>{`Last but not least, create the `}<inlineCode parentName=\"p\">{`iks.tf`}</inlineCode>{` file to define the IKS cluster using the `}<inlineCode parentName=\"p\">{`ibm_container_vpc_cluster`}</inlineCode>{` resource.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=iks.tf\",\n        \"path\": \"iks.tf\"\n      }}>{`resource \"ibm_container_vpc_cluster\" \"iac_iks_cluster\" {\n  name              = \"\\${var.project_name}-\\${var.environment}-cluster\"\n  vpc_id            = ibm_is_vpc.iac_iks_vpc.id\n  flavor            = var.flavor\n  worker_count      = var.workers_count[0]\n  kube_version      = var.k8s_version\n  resource_group_id = data.ibm_resource_group.group.id\n  zones {\n    name      = var.vpc_zone_names[0]\n    subnet_id = ibm_is_subnet.iac_iks_subnet[0].id\n  }\n}\n`}</code></pre>\n    <p>{`The above code also takes the Kubernetes version, worker nodes flavor and number from the variables `}<inlineCode parentName=\"p\">{`k8s_version`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`flavor`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`workers_count`}</inlineCode>{` respectively, so lets add them to the `}<inlineCode parentName=\"p\">{`variables.tf`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=variables.tf\",\n        \"path\": \"variables.tf\"\n      }}>{`  ...\nvariable \"flavor\" {\n  default = \"mx2.4x32\"\n}\nvariable \"workers_count\" {\n  default = 3\n}\nvariable \"k8s_version\" {\n  default = \"1.18.3\"\n}\n`}</code></pre>\n    <p>{`This will create a Kubernetes cluster of 3 worker nodes with 4 CPU and 32 Gb Memory. To know the available flavors in the zone, use the following IBM Cloud CLI command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ibmcloud ks zone ls --provider vpc-gen2 --show-flavors\n\n# Or\nZONE=us-south-1\nibmcloud ks flavors --provider vpc-gen2 --zone $ZONE\n`}</code></pre>\n    <p>{`To sort them by CPU and memory, use the same command with `}<inlineCode parentName=\"p\">{`sort`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ZONE=us-south-1\nibmcloud ks flavors --provider vpc-gen2 --zone $ZONE -s | sort -k2 -k3 -n\n`}</code></pre>\n    <p>{`The main input parameters of the `}<inlineCode parentName=\"p\">{`ibm_container_vpc_cluster`}</inlineCode>{` resource are listed in the following table:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input parameter`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name of the cluster`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`vpc_id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ID of the VPC that you want to use for your cluster`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`flavor`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`flavor of the VPC worker node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`zones`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`nested block describing the zones of this VPC cluster`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`zones.name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name of the zone`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`zones.subnet_id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`subnet in the zone to assign the cluster`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`worker_count`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(optional) number of worker nodes per zone in the default worker pool. Default value `}<inlineCode parentName=\"td\">{`1`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`kube_version`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(optional) Kubernetes version, including the major.minor version. If not set, the default version from `}<inlineCode parentName=\"td\">{`ibmcloud ks versions`}</inlineCode>{` is used`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`resource_group_id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(optional) ID of the resource group. Defaults to `}<inlineCode parentName=\"td\">{`default`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`wait_till`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(optional) marks the creation of your cluster complete when the given stage is achieved, read below to know the available stages and how this can help you speed up the terraform execution`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`disable_public_service_endpoint`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(optional) disable the master public service endpoint to prevent public access. Defaults to `}<inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`pod_subnet`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(optional) subnet CIDR to provide private IP addresses for pods. Defaults to `}<inlineCode parentName=\"td\">{`172.30.0.0/16`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`service_subnet`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(optional) subnet CIDR to provide private IP addresses for services. Defaults to `}<inlineCode parentName=\"td\">{`172.21.0.0/16`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`tags`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(optional) list of tags to associate with your cluster`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`The creation of a cluster can take some minutes to complete. To avoid long wait times, you can specify the stage when you want Terraform to mark the cluster resource creation as completed. The cluster creation might not be fully completed and continues to run in the background, however this can help you to continue with the code execution without waiting for the cluster to be fully created.`}</p>\n    <p>{`To set the waiting stage, use the `}<inlineCode parentName=\"p\">{`wait_till`}</inlineCode>{` with one of the following stages:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`MasterNodeReady`}</strong>{`: Terraform marks the creation of your cluster complete when the cluster master is in a ready state.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`OneWorkerNodeReady`}</strong>{`: Waits until the master and at least one worker node are in a ready state.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`IngressReady`}</strong>{`: Waits until the cluster master and all worker nodes are in a ready state, and the Ingress subdomain is fully set up. This is the default value.`}</li>\n    </ul>\n    <p>{`This would be enough to have an IKS cluster running. Just need to execute `}<inlineCode parentName=\"p\">{`terraform apply`}</inlineCode>{`, however lets create workers pools, one in each subnet or zone, using the resource `}<inlineCode parentName=\"p\">{`ibm_container_vpc_worker_pool`}</inlineCode>{`. Replace the code in `}<inlineCode parentName=\"p\">{`iks.tf`}</inlineCode>{` file for the following code and modify the variables used for the number of workers and its flavor.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=iks.tf\",\n        \"path\": \"iks.tf\"\n      }}>{`resource \"ibm_container_vpc_cluster\" \"iac_iks_cluster\" {\n  name              = \"\\${var.project_name}-\\${var.environment}-cluster\"\n  vpc_id            = ibm_is_vpc.iac_iks_vpc.id\n  flavor            = var.flavors[0]\n  worker_count      = var.workers_count[0]\n  kube_version      = var.k8s_version\n  resource_group_id = data.ibm_resource_group.group.id\n  wait_till         = \"OneWorkerNodeReady\"\n  zones {\n    name      = var.vpc_zone_names[0]\n    subnet_id = ibm_is_subnet.iac_iks_subnet[0].id\n  }\n}\n\nresource \"ibm_container_vpc_worker_pool\" \"iac_iks_cluster_pool\" {\n  count             = local.max_size - 1\n  cluster           = ibm_container_vpc_cluster.iac_iks_cluster.id\n  worker_pool_name  = \"\\${var.project_name}-\\${var.environment}-wp-\\${format(\"%02s\", count.index + 1)}\"\n  flavor            = var.flavors[count.index + 1]\n  vpc_id            = ibm_is_vpc.iac_iks_vpc.id\n  worker_count      = var.workers_count[count.index + 1]\n  resource_group_id = data.ibm_resource_group.group.id\n  zones {\n    name      = var.vpc_zone_names[count.index + 1]\n    subnet_id = ibm_is_subnet.iac_iks_subnet[count.index + 1].id\n  }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=variables.tf\",\n        \"path\": \"variables.tf\"\n      }}>{`variable \"flavors\" {\n  type    = list(string)\n  default = [\"mx2.4x32\", \"cx2.2x4\", \"cx2.4x8\"]\n}\nvariable \"workers_count\" {\n  type    = list(number)\n  default = [3, 2, 1]\n}\n`}</code></pre>\n    <p>{`The main input parameters for the `}<inlineCode parentName=\"p\">{`ibm_container_vpc_worker_pool`}</inlineCode>{` resource are similar to the parameters for `}<inlineCode parentName=\"p\">{`ibm_container_vpc_cluster`}</inlineCode>{` except for `}<inlineCode parentName=\"p\">{`worker_pool_name`}</inlineCode>{` which is used to name the pool, and `}<inlineCode parentName=\"p\">{`cluster`}</inlineCode>{` with the name or ID of the cluster set this pool.`}</p>\n    <p>{`Using a file `}<inlineCode parentName=\"p\">{`output.tf`}</inlineCode>{` helps us to get some useful information about the cluster through output variables, like so.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=output.tf\",\n        \"path\": \"output.tf\"\n      }}>{`output \"cluster_id\" {\n  value = ibm_container_vpc_cluster.iac_iks_cluster.id\n}\n\noutput \"cluster_name\" {\n  value = ibm_container_vpc_cluster.iac_iks_cluster.name\n}\n\noutput \"entrypoint\" {\n  value = ibm_container_vpc_cluster.iac_iks_cluster.public_service_endpoint_url\n}\n`}</code></pre>\n    <p>{`Now everything is ready to create the cluster with the wellknown Terraform commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`terraform plan\nterraform apply\n`}</code></pre>\n    <p>{`After having the cluster ready, you can use the IBM Cloud CLI to get the cluster configuration to setup `}<inlineCode parentName=\"p\">{`kubectl`}</inlineCode>{`, like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ibmcloud ks cluster config --cluster $(terraform output cluster_id)\n`}</code></pre>\n    <p>{`Enjoy the new cluster, here are some basic initial commands to verify the cluster is working`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl cluster-info\nkubectl get nodes\nkubectl get pods -A\n`}</code></pre>\n    <h3>{`A simpler IKS cluster`}</h3>\n    <p>{`For simplicity and creation speed, lets modify the `}<inlineCode parentName=\"p\">{`terraform.tfvars`}</inlineCode>{` to have a simpler cluster with one single node. This will help us to have the cluster quicker.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=terraform.tfvars\",\n        \"path\": \"terraform.tfvars\"\n      }}>{`project_name = \"iac-iks-small-OWNER\"\nenvironment  = \"dev\"\n\n# Optional variables\nresource_group = \"Default\"\nregion         = \"us-south\"\nvpc_zone_names = [\"us-south-1\"]\nflavors        = [\"mx2.4x32\"]\nworkers_count  = [1]\nk8s_version    = \"1.18.3\"\n`}</code></pre>\n    <p>{`Remember to get a supported and the latest Kubernetes version from the output of the command `}<inlineCode parentName=\"p\">{`ibmcloud ks versions`}</inlineCode>{`, otherwise you may get an error like this one:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Error: Request failed with status code: 400, ServerErrorResponse: {\"incidentID\":\"5a4a1a08a275eb6d-LAX\",\"code\":\"E0156\",\"description\":\"A previous patch was specified. Only the most recent patch for a particular minor version can be specified during cluster create.\",\"type\":\"Versions\",\"recoveryCLI\":\"To list supported versions, run 'ibmcloud ks versions'.\"}\n`}</code></pre>\n    <p>{`Executing `}<inlineCode parentName=\"p\">{`terraform plan & terraform apply`}</inlineCode>{` will get an IKS cluster up and running quicker than before.`}</p>\n    <h2>{`IKS with IBM Cloud Schematics`}</h2>\n    <p>{`Running this code with IBM Cloud Schematics is the same as with the other patterns. Create the `}<inlineCode parentName=\"p\">{`workspace.json`}</inlineCode>{` file adding the variables required for this code and replacing `}<inlineCode parentName=\"p\">{`OWNER`}</inlineCode>{` for your username or id, like this one:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"path=workspace.json\",\n        \"path\": \"workspace.json\"\n      }}>{`{\n  \"name\": \"iac_iks_test\",\n  \"type\": [\n    \"terraform_v0.12\"\n  ],\n  \"description\": \"Sample workspace to test IBM Cloud Schematics. Deploys an web server on a VSI with a Hello World response\",\n  \"tags\": [\n    \"app:iac_iks_test\",\n    \"owner:OWNER\",\n    \"env:dev\"\n  ],\n  \"template_repo\": {\n    \"url\": \"https://github.com/IBM/cloud-enterprise-examples/tree/master/iac/09-containers\"\n  },\n  \"template_data\": [{\n    \"folder\": \".\",\n    \"type\": \"terraform_v0.12\",\n    \"variablestore\": [{\n        \"name\": \"project_name\",\n        \"value\": \"iac-iks-test-OWNER\",\n        \"type\": \"string\"\n      },\n      {\n        \"name\": \"environment\",\n        \"value\": \"dev\",\n        \"type\": \"string\"\n      },\n      {\n        \"name\": \"region\",\n        \"value\": \"us-south\",\n        \"type\": \"string\"\n      },\n      {\n        \"name\": \"vpc_zone_names\",\n        \"value\": [\"us-south-1\", \"us-south-2\", \"us-south-3\"],\n        \"type\": \"list(string)\"\n      },\n      {\n        \"name\": \"flavors\",\n        \"value\": [\"mx2.4x32\", \"cx2.2x4\", \"cx2.4x8\"],\n        \"type\": \"list(string)\"\n      },\n      {\n        \"name\": \"workers_count\",\n        \"value\": [3, 2, 1],\n        \"type\": \"list(number)\"\n      },\n      {\n        \"name\": \"k8s_version\",\n        \"value\": \"1.18.3\",\n        \"type\": \"string\"\n      }\n    ]\n  }]\n}\n`}</code></pre>\n    <p>{`To create the workspace using the IBM Cloud CLI execute the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ibmcloud schematics workspace new --file workspace.json\nibmcloud schematics workspace list          # Identify the WORKSPACE_ID\nWORKSPACE_ID=\n`}</code></pre>\n    <p>{`Set the variable `}<inlineCode parentName=\"p\">{`WORKSPACE_ID`}</inlineCode>{` because it’ll be used several times. Then plan and apply the code like so.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ibmcloud schematics plan --id $WORKSPACE_ID  # Identify the Activity_ID\nibmcloud schematics logs  --id $WORKSPACE_ID --act-id Activity_ID\n\nibmcloud schematics apply --id $WORKSPACE_ID # Identify the Activity_ID\nibmcloud schematics logs  --id $WORKSPACE_ID --act-id Activity_ID\n`}</code></pre>\n    <p>{`Note the execution of apply will take some time, so check the logs either with the IBM Cloud CLI command or using the IBM Cloud Web Console. When the cluster is ready, you can use the IBM Cloud CLI to get the cluster configuration to setup `}<inlineCode parentName=\"p\">{`kubectl`}</inlineCode>{` and validate the cluster is accesible:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`CLUSTER_ID=$(ibmcloud schematics workspace output --id $WORKSPACE_ID --json | jq -r '.[].output_values[].cluster_id.value')\nibmcloud ks cluster config --cluster $CLUSTER_ID\n\nkubectl cluster-info\nkubectl get nodes\nkubectl get pods -A\n`}</code></pre>\n    <h2>{`Deploy the Application`}</h2>\n    <p>{`To deploy the previously built Docker image version 1.0 we use the Kubernetes API and resources. Lets create a deployment file either by getting it from the following example or generating it with kubectl generators, like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`mkdir kubernetes\nkubectl create deployment movies --image=us.icr.io/iac-registry/movies:1.0 --dry-run=client -o yaml > kubernetes/deployment.yaml\nkubectl expose deployment movies --port=80 --target-port=8080 --type=LoadBalancer --dry-run=client -o yaml > kubernetes/service.yaml\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=kubernetes/deployment.yaml\",\n        \"path\": \"kubernetes/deployment.yaml\"\n      }}>{`apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: movies\n  name: movies\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: movies\n  template:\n    metadata:\n      labels:\n        app: movies\n    spec:\n      containers:\n        - image: us.icr.io/iac-registry/movies:1.0\n          name: movies\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=kubernetes/service.yaml\",\n        \"path\": \"kubernetes/service.yaml\"\n      }}>{`apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: movies\n  name: movies\nspec:\n  ports:\n    - name: \"http\"\n      port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: movies\n  type: LoadBalancer\n`}</code></pre>\n    <p>{`To deploy the application execute the `}<inlineCode parentName=\"p\">{`kubectl apply`}</inlineCode>{` command like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl apply -f kubernetes/deployment.yaml\nkubectl apply -f kubernetes/service.yaml\n\nkubectl get deployment movies\nkubectl get svc movies\n`}</code></pre>\n    <p>{`To validate the application you need to get the external IP or DNS to access the application executing the following code. You may have to wait a few minutes until the Load Balancer is ready. You can checkt thest status again using `}<inlineCode parentName=\"p\">{`kubectl get svc movies`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`watch kubectl get svc movies\n\nADDRESS=$(kubectl get svc movies -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')\n\ncurl $ADDRESS/movies/675\n`}</code></pre>\n    <p>{`In a real application, it’s quite common to have new or changing data. In this example, such a change to the JSON database would require a new image. If this happens very often it becomes very efficient. To address this inflexible model, you can put the JSON database in a ConfigMap. Create the `}<inlineCode parentName=\"p\">{`cm.yaml`}</inlineCode>{` file to define the ConfigMap with the content of the JSON file `}<inlineCode parentName=\"p\">{`data/v1/db.min.json`}</inlineCode>{` using this command`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl create configmap movies-db --from-file=./data/v1/db.min.json --dry-run=client -o yaml > kubernetes/cm.yaml\n`}</code></pre>\n    <p>{`Or, edit the file yourself with the following content.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=kubernetes/cm.yaml\",\n        \"path\": \"kubernetes/cm.yaml\"\n      }}>{`apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: movies-db\ndata:\n  db.min.json: |\n    {\"movies\":[ ... HERE GOES THE JSON FILE ... ]}\n`}</code></pre>\n    <p>{`And apply the code to the cluster using `}<inlineCode parentName=\"p\">{`kubectl`}</inlineCode>{`, like this.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl apply -f kubernetes/cm.yaml\nkubectl get cm\n`}</code></pre>\n    <p>{`To make the pod access the JSON file you need to modify the Pod definition inside the deployment. Modify the `}<inlineCode parentName=\"p\">{`deployment.yaml`}</inlineCode>{` file to add the `}<inlineCode parentName=\"p\">{`volumes`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`volumeMounts`}</inlineCode>{` specifications, like so.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=kubernetes/deployment.yaml\",\n        \"path\": \"kubernetes/deployment.yaml\"\n      }}>{`apiVersion: apps/v1\nkind: Deployment\n  ...\n    spec:\n      volumes:\n        - name: db-volume\n          configMap:\n            name: movies-db\n      containers:\n        - image: us.icr.io/iac-registry/movies:1.0\n          name: movies\n          volumeMounts:\n            - name: db-volume\n              mountPath: /data\n`}</code></pre>\n    <p>{`Update the new Pod applying the code, then verify it was sucessfuly applied using these commands.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl apply -f kubernetes/v1.0/deployment.yaml\nkubectl get deployments,pods\n`}</code></pre>\n    <p>{`The application should be running as usual:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ADDRESS=$(kubectl get svc movies -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')\ncurl $ADDRESS/movies/675\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`What about the JSON DB in the container?`}</strong></p>\n      <p>{`Ideally you need to remove the line that copy the JSON database file into the image from the Dockerfile (`}<inlineCode parentName=\"p\">{`COPY ./data/v1 /data`}</inlineCode>{`), then re-build and push the image to ICR. However, this is a simple example and we will modify this application docker image even more.`}</p>\n      <p>{`With the new ConfigMap the current `}<inlineCode parentName=\"p\">{`/data/db.min.json`}</inlineCode>{` file in the container is replaced by the one from the ConfigMap. You can verify it’s there with the execution of `}<inlineCode parentName=\"p\">{`kubectl exec --stdin --tty movies-89977dc9-7gdpd -- cat /data/db.min.json`}</inlineCode>{`, replacing `}<inlineCode parentName=\"p\">{`movies-89977dc9-7gdpd`}</inlineCode>{` for the name of the movies Pod.`}</p>\n    </InlineNotification>\n    <p>{`To double check, modify the ConfigMap updating a movie or modifying the database, then access the application using `}<inlineCode parentName=\"p\">{`curl`}</inlineCode>{`. The instructions when the ConfigMap is modified are as follows.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Modify the ConfigMap in the file `}<inlineCode parentName=\"li\">{`cm.yaml`}</inlineCode></li>\n      <li parentName=\"ol\">{`Applying the changes with the command `}<inlineCode parentName=\"li\">{`kubectl apply -f kubernetes/cm.yaml`}</inlineCode></li>\n      <li parentName=\"ol\">{`Delete the running pods so the Replica Set create a new pod using the new JSON database. Identify the Pod name using `}<inlineCode parentName=\"li\">{`kubectl get pods`}</inlineCode>{` then use the command `}<inlineCode parentName=\"li\">{`kubectl delete pod <Movies Pod Name>`}</inlineCode></li>\n      <li parentName=\"ol\">{`Verify the change with `}<inlineCode parentName=\"li\">{`curl $ADDRESS/movies/`}</inlineCode>{`.`}</li>\n    </ol>\n    <h2>{`Persistent Volumes`}</h2>\n    <p>{`In the version 1.0 of the application, the JSON database was in the ephemeral container, this may not be good practice in general so let’s migrate the database to a persistent storage such as IBM Cloud Block Storage for VPC. This storage provides hypervisor-mounted, high-performance data storage for your VSI or IKS nodes that you can provision within a VPC.`}</p>\n    <p>{`Let’s start creating the file `}<inlineCode parentName=\"p\">{`pvc.yaml`}</inlineCode>{` with the definition of a `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolumeclaim\"\n      }}>{`Persisten Volume Claim`}</a>{` with 1Gb and the profile `}<inlineCode parentName=\"p\">{`ibmc-vpc-block-5iops-tier`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=kubernetes/pvc.yaml\",\n        \"path\": \"kubernetes/pvc.yaml\"\n      }}>{`apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: movies\nspec:\n  storageClassName: ibmc-vpc-block-general-purpose\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n`}</code></pre>\n    <p>{`Before use the Persistent Volume Claim (PVC) apply the changes, it has to be ready before being used.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl apply -f kubernetes/pvc.yaml\nkubectl get pvc movies\n`}</code></pre>\n    <p>{`To use this volume we need to modify the Pod specification in the deployment, open the `}<inlineCode parentName=\"p\">{`kubernetes/deployment.yaml`}</inlineCode>{` file to add the `}<inlineCode parentName=\"p\">{`volumes`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`volumeMounts`}</inlineCode>{` specifications.`}</p>\n    <p>{`However, these changes don’t put the initial JSON database into the volume yet. There may be different ways to do this, a possible option is to the use of `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\"\n      }}>{`Init Containers`}</a>{` to dump the initial JSON database into the volume, but this option cannot be used because the volume access mode is `}<strong parentName=\"p\">{`ReadWriteOnce`}</strong>{` which only allows one container to access the volume at a time. Other option, and the one we will implement, is to make the Docker container copy the initial database into the volumen if there isn’t any yet. The initial JSON file is provided with a ConfigMap, let’s add it just like we did in the previous section.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`deployment.yaml`}</inlineCode>{` file will be like this.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=kubernetes/deployment.yaml\",\n        \"path\": \"kubernetes/deployment.yaml\"\n      }}>{`apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: movies\n  name: movies\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: movies\n  template:\n    metadata:\n      labels:\n        app: movies\n    spec:\n      volumes:\n        - name: movies-volume\n          persistentVolumeClaim:\n            claimName: movies\n        - name: db-volume\n          configMap:\n            name: movies-db\n      containers:\n        - image: us.icr.io/iac-registry/movies:1.1\n          name: movies\n          volumeMounts:\n            - name: db-volume\n              mountPath: /data/init\n            - name: movies-volume\n              mountPath: \"/data\"\n`}</code></pre>\n    <p>{`As you can see the image version is different, it is `}<inlineCode parentName=\"p\">{`1.1`}</inlineCode>{`. In the new Dockerfile we remove the line `}<inlineCode parentName=\"p\">{`COPY ./data/v1 /data`}</inlineCode>{` and add the line `}<inlineCode parentName=\"p\">{`VOLUME /data`}</inlineCode>{`. Also, instead of executing the `}<inlineCode parentName=\"p\">{`json-server`}</inlineCode>{` command, it runs a script to copy the database to the right location. The new Dockerfile, to be tagged with version `}<inlineCode parentName=\"p\">{`1.1`}</inlineCode>{`, is like this.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-dockerfile\",\n        \"metastring\": \"path=docker/1.1/Dockerfile\",\n        \"path\": \"docker/1.1/Dockerfile\"\n      }}>{`FROM node:13\n\nRUN npm install -g json-server\nADD entrypoint.sh /entrypoint.sh\n\nWORKDIR /app\nVOLUME /data\n\nEXPOSE 8080\n\nENTRYPOINT [ \"/entrypoint.sh\" ]\n\nCMD [ \"\" ]\n`}</code></pre>\n    <p>{`And the script to be executed as entrypoint executes the input with `}<inlineCode parentName=\"p\">{`exec \"$@\"`}</inlineCode>{`, however if no command is passed in it’ll execute `}<inlineCode parentName=\"p\">{`json-server`}</inlineCode>{` after initialize the JSON database file. This script is like follows.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\",\n        \"metastring\": \"path=docker/1.1/entrypoint.sh\",\n        \"path\": \"docker/1.1/entrypoint.sh\"\n      }}>{`#!/bin/bash\n\nif [[ -n \"$@\" ]]; then\n  exec \"$@\"\n  exit $?\nfi\n\nport=\"8080\"\nhost=\"0.0.0.0\"\ninit_db='{\"movies\": []}'\ninit_db_file=/data/init/db.min.json\ndb_file=/data/db.json\n\ninit_database() {\n  # If the DB is there and contain movies, there is nothing to do\n  [[ -e $db_file ]] && grep -q '\"movies\"' $db_file && echo \"A database file with movies already exists.\" && return\n\n  # If the init DB file is there, copy it to the DB file and return if succeed\n  [[ -e $init_db_file ]] && cp $init_db_file $db_file && echo \"initialized the database with the database file $init_db_file.\" && return\n\n  # if everything failed, initiallize the DB with empty list of movies\n  echo \"initializing the database with an empty database.\"\n  echo $init_db > $db_file\n}\n\ninit_database\n\necho \"Starting json-server on $host:$port watching for DB file $db_file\"\njson-server --port $port --host $host --watch $db_file\n`}</code></pre>\n    <p>{`This new image has to be built, tagged and pushed to ICR very similar to like we did with the initial version and that’s what we will do in a moment. This time the context of `}<inlineCode parentName=\"p\">{`docker build`}</inlineCode>{` change to `}<inlineCode parentName=\"p\">{`docker/1.1`}</inlineCode>{` because we don’t use the `}<inlineCode parentName=\"p\">{`./data`}</inlineCode>{` directory and we use the `}<inlineCode parentName=\"p\">{`docker/1.1/entrypoint.sh`}</inlineCode>{` script.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker build -t us.icr.io/iac-registry/movies:1.1 -f docker/1.1/Dockerfile docker/1.1\ndocker push us.icr.io/iac-registry/movies:1.1\n\nibmcloud cr images --restrict iac-registry\n`}</code></pre>\n    <p>{`Apply all files and verify the new changes executing the following commands.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl apply -f kubernetes/pvc.yaml\nkubectl apply -f kubernetes/cm.yaml\nkubectl apply -f kubernetes/deployment.yaml\n\nkubectl get pvc movies\nkubectl get cm movies\nkubectl get deployment movies\nkubectl get pods\n\nADDRESS=$(kubectl get svc movies -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')\ncurl $ADDRESS/movies/83\n`}</code></pre>\n    <p>{`Having the JSON Database in a persistent volume we can modify the database and the changes will persist the next time we deploy the application or restart the container. Having the following movie to add:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"path=data/v1/new_movie.json\",\n        \"path\": \"data/v1/new_movie.json\"\n      }}>{`{\n  \"id\": \"32\",\n  \"title\": \"13 Assassins\",\n  \"originalTitle\": \"十三人の刺客\",\n  \"contentRating\": \"R\",\n  \"summary\": \"Cult director Takashi Miike (Ichi the Killer, Audition) delivers a bravado period action film set at the end of Japan’s feudal era. 13 Assassins - a “masterful exercise in cinematic butchery” (New York Post) - is centered around a group of elite samurai who are secretly enlisted to bring down a sadistic lord to prevent him from ascending to the throne and plunging the country into a war torn future.\",\n  \"rating\": \"9.6\",\n  \"audienceRating\": \"8.8\",\n  \"year\": \"2011\",\n  \"tagline\": \"Take up your sword.\",\n  \"duration\": \"7505063\",\n  \"originallyAvailableAt\": \"2011-07-05\",\n  \"addedAt\": \"1351391906\",\n  \"updatedAt\": \"1546942538\",\n  \"audienceRatingImage\": \"rottentomatoes://image.rating.upright\",\n  \"hasPremiumPrimaryExtra\": \"1\",\n  \"ratingImage\": \"rottentomatoes://image.rating.ripe\",\n  \"genre\": \"Action & Adventure\",\n  \"director\": \"Takashi Miike\",\n  \"writer\": [\"Kaneo Ikegami\", \"Daisuke Tengan\"],\n  \"country\": \"Japan\",\n  \"cast\": [\"Yusuke Iseya\", \"Kôji Yakusho\"]\n}\n`}</code></pre>\n    <p>{`Lets add the new movie using `}<inlineCode parentName=\"p\">{`curl`}</inlineCode>{`, scale the deployment to zero containers, then back to one and verify the new movie is still there.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl -X POST -H \"Content-Type: application/json\" -d@data/v1/new_movie.json $ADDRESS/movies\ncurl $ADDRESS/movies/32\n\nkubectl scale deployment movies --replicas=0\nkubectl get deployments movies\nkubectl get pods\nkubectl get pv,pvc\n\nkubectl scale deployment movies --replicas=1\nkubectl get deployments movies\nwatch kubectl get pods\n\n# When the pod is running:\ncurl $ADDRESS/movies/32\n`}</code></pre>\n    <p>{`To learn more about the storage provided to the persistent volume claim, see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.ibm.com/docs/containers?topic=containers-vpc-block\"\n      }}>{`Block Storage for VPC`}</a>{` documentation.`}</p>\n    <h2>{`External IBM Cloud Database`}</h2>\n    <p>{`This section provides an example of deploying the Python API application used in the `}<a parentName=\"p\" {...{\n        \"href\": \"/iac-resources/services\"\n      }}>{`Cloud Databases`}</a>{` pattern also in the GitHub repository `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/cloud-enterprise-examples/\"\n      }}>{`https://github.com/IBM/cloud-enterprise-examples/`}</a>{` in the directory `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/cloud-enterprise-examples/tree/master/iac/08_cloud-services/app\"\n      }}>{`08_cloud-services/app`}</a>{`.`}</p>\n    <p>{`This change requires more major changes to the Docker container so it’s going to make sense to bump the tag to `}<inlineCode parentName=\"p\">{`2.0`}</inlineCode>{`. In the following Dockerfile we use a multi-stage build to reduce the size of the final Docker image. The `}<inlineCode parentName=\"p\">{`build`}</inlineCode>{` stage use Python VirtualEnv to install all the required packages then they are copied to the `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` image which is used to execute the API application.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-dockerfile\",\n        \"metastring\": \"path=docker/2.0/Dockerfile\",\n        \"path\": \"docker/2.0/Dockerfile\"\n      }}>{`FROM python:3.7-slim AS build\n\nRUN apt-get update && \\\\\n  apt-get install -y --no-install-recommends build-essential gcc && \\\\\n  pip install --upgrade pip && \\\\\n  pip install pip-tools\nRUN python -m venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\nCOPY app.py .\nCOPY import.py .\nCOPY requirements.txt requirements.in\nRUN pip-compile requirements.in > requirements.txt && \\\\\n  pip-sync && \\\\\n  pip install -r requirements.txt\n\nFROM python:3.7-slim AS app\nCOPY --from=build /opt/venv /opt/venv\n\nCOPY app.py .\nCOPY import.py .\nRUN chmod +x app.py import.py\n\nENV PATH=\"/opt/venv/bin:$PATH\"\n\nCMD [ \"python\", \"app.py\" ]\n`}</code></pre>\n    <p>{`Just as with the previous versions, let’s build and push the container using the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker build -t us.icr.io/iac-registry/movies:2.0 -f docker/2.0/Dockerfile docker/2.0\ndocker push us.icr.io/iac-registry/movies:2.0\n\nibmcloud cr images --restrict iac-registry\n`}</code></pre>\n    <p>{`We also need the IBM Cloud Database, with the following Terraform code in the `}<inlineCode parentName=\"p\">{`db.tf`}</inlineCode>{` file copied from the `}<a parentName=\"p\" {...{\n        \"href\": \"/iac-resources/services\"\n      }}>{`Cloud Databases`}</a>{` pattern, like so.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=db.tf\",\n        \"path\": \"db.tf\"\n      }}>{`resource \"ibm_database\" \"iac_app_db_instance\" {\n  name              = var.db_name\n  plan              = var.db_plan\n  location          = var.region\n  service           = \"databases-for-mongodb\"\n  resource_group_id = data.ibm_resource_group.group.id\n\n  adminpassword                = var.db_admin_password\n  members_memory_allocation_mb = var.db_memory_allocation\n  members_disk_allocation_mb   = var.db_disk_allocation\n}\n`}</code></pre>\n    <p>{`This file also requires addition of the following input variables to the `}<inlineCode parentName=\"p\">{`variables.tf`}</inlineCode>{` file and output variables to the `}<inlineCode parentName=\"p\">{`output.tf`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=variables.tf\",\n        \"path\": \"variables.tf\"\n      }}>{`variable \"db_plan\" {\n  default = \"standard\"\n}\nvariable \"db_name\" {\n  default = \"moviedb\"\n}\nvariable \"db_admin_password\" {\n  default = \"inSecurePa55w0rd\"\n}\nvariable \"db_memory_allocation\" {\n  default = \"3072\"\n}\nvariable \"db_disk_allocation\" {\n  default = \"61440\"\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=output.tf\",\n        \"path\": \"output.tf\"\n      }}>{`output \"db_connection_string\" {\n  value = ibm_database.iac_app_db_instance.connectionstrings.0.composed\n}\noutput \"db_connection_certbase64\" {\n  value = ibm_database.iac_app_db_instance.connectionstrings.0.certbase64\n}\noutput \"db_admin_userid\" {\n  value = ibm_database.iac_app_db_instance.adminuser\n}\noutput \"db_id\" {\n  value = ibm_database.iac_app_db_instance.id\n}\noutput \"db_password\" {\n  value = var.db_admin_password\n}\n`}</code></pre>\n    <p>{`To get it running, execute the `}<inlineCode parentName=\"p\">{`plan`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`apply`}</inlineCode>{` Terraform commands.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`terrform plan\nterrform apply\n`}</code></pre>\n    <p>{`Before deploying the container to our Kubernetes cluster, do some local testing using just Docker. Execute the following commands to run the container locally, mounting the local directory `}<inlineCode parentName=\"p\">{`./data/v2`}</inlineCode>{` in a volume on the container directory `}<inlineCode parentName=\"p\">{`/data/init/`}</inlineCode>{` so the application can reach the `}<inlineCode parentName=\"p\">{`db.min.json`}</inlineCode>{` file with the initial values of the database. The initial database `}<inlineCode parentName=\"p\">{`db.min.json`}</inlineCode>{` file is different to the one used for version 1 because the `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` field is not required. Also, to allow the container to reach the IBM Cloud MongoDB Database that was created, populate environment variables with values from the Terraform output variables.`}</p>\n    <p>{` The following commands will: create all the application input data, initialize the database, run the container with the API application and finally query the application with `}<inlineCode parentName=\"p\">{`curl`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`mkdir ./secret\nterraform output db_connection_certbase64 | base64 --decode > ./secret/db_ca.crt\n\nexport PASSWORD=$(terraform output db_password)\nexport APP_MONGODB_URI=$(terraform output db_connection_string)\nexport APP_PORT=8080\nexport APP_SSL_CA_CERT=\"/secret/db_ca.crt\"\n\ndocker run --rm \\\\\n  --name init-movies \\\\\n  -v $PWD/data/v2:/data/init \\\\\n  -v $PWD/secret:/secret \\\\\n  -e APP_SSL_CA_CERT=$APP_SSL_CA_CERT \\\\\n  -e PASSWORD=$PASSWORD \\\\\n  -e APP_MONGODB_URI=$APP_MONGODB_URI \\\\\n  us.icr.io/iac-registry/movies:2.0 python import.py\n\ndocker run --rm \\\\\n  --name movies \\\\\n  -p 80:$APP_PORT \\\\\n  -v $PWD/secret:/secret \\\\\n  -e APP_SSL_CA_CERT=$APP_SSL_CA_CERT \\\\\n  -e PASSWORD=$PASSWORD \\\\\n  -e APP_MONGODB_URI=$APP_MONGODB_URI \\\\\n  -e APP_PORT=$APP_PORT \\\\\n  us.icr.io/iac-registry/movies:2.0\n\ncurl http://localhost/api/healthcheck\ncurl http://localhost/api/movies\n\n\nid=$(curl -s \"http://localhost/api/movies\" | jq -r '.[0]._id | .[\"$oid\"]')\ncurl \"http://localhost/api/movies/$id\"\n`}</code></pre>\n    <p>{`To wipe out the database use the same docker container but instead run the `}<inlineCode parentName=\"p\">{`python import.py`}</inlineCode>{` command with the `}<inlineCode parentName=\"p\">{`--empty`}</inlineCode>{` parameter, like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker run --rm \\\\\n  --name drop-movies \\\\\n  -v $PWD/secret:/secret \\\\\n  -e APP_SSL_CA_CERT=$APP_SSL_CA_CERT \\\\\n  -e PASSWORD=$PASSWORD \\\\\n  -e APP_MONGODB_URI=$APP_MONGODB_URI \\\\\n  us.icr.io/iac-registry/movies:2.0 python import.py --empty\n`}</code></pre>\n    <p>{`The current Database was created with a public endpoint (it’s public by default) and considering the current IKS cluster is private you may also want to migrate this database to be private as well. It was not created from the very begining because you may want to test the database from your computer, ilke we did running Docker locally.`}</p>\n    <p>{`To set this database with a private endpoint add the parameter `}<inlineCode parentName=\"p\">{`service_endpoints = \"private\"`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`ibm_database.iac_app_db_instance`}</inlineCode>{` located in the `}<inlineCode parentName=\"p\">{`db.tf`}</inlineCode>{` file, Like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=db.tf\",\n        \"path\": \"db.tf\"\n      }}>{`resource \"ibm_database\" \"iac_app_db_instance\" {\n  name              = var.db_name\n  plan              = var.db_plan\n  location          = var.region\n  service           = \"databases-for-mongodb\"\n  resource_group_id = data.ibm_resource_group.group.id\n  service_endpoints = \"private\"\n\n  adminpassword                = var.db_admin_password\n  members_memory_allocation_mb = var.db_memory_allocation\n  members_disk_allocation_mb   = var.db_disk_allocation\n}\n`}</code></pre>\n    <p>{`To apply this migration the database has to be deleted first, applying this change now with Terrafor will cause an error because it’s a parameter that cannot be set and modify the database. So, delete the database using the `}<inlineCode parentName=\"p\">{`destroy`}</inlineCode>{` Terraform command targetting the database, then apply the changes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`terraform destroy -target ibm_database.iac_app_db_instance\n\nterraform apply\n`}</code></pre>\n    <p>{`If the local docker container works, everything is ready to work on the Kubernetes deployment. A new ConfigMap is required with the initial data for MongoDB, another ConfigMap is required with the environment variables to have access to the database, and finally, two Secrets are required, the first `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#define-container-environment-variables-using-secret-data\"\n      }}>{`Secret`}</a>{` is used to store the database CA certificate and the second `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#configure-all-key-value-pairs-in-a-secret-as-container-environment-variables\"\n      }}>{`Secret`}</a>{` stores the DB admin password. Create the ConfigMaps and Secrets with the following commands`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export PASSWORD=$(terraform output db_password)\nexport APP_MONGODB_URI=$(terraform output db_connection_string)\nexport APP_SSL_CA_CERT=\"/secret/db_ca.crt\"\n\nkubectl create configmap movies-db \\\\\n  --from-file=./data/v2/db.min.json \\\\\n  --dry-run=client -o yaml > kubernetes/cm.yaml\n\nkubectl create configmap config \\\\\n  --from-literal=APP_SSL_CA_CERT=$APP_SSL_CA_CERT \\\\\n  --from-literal=APP_MONGODB_URI=$APP_MONGODB_URI \\\\\n  --dry-run=client -o yaml > kubernetes/config.yaml\n\nkubectl create secret generic db-admin-password \\\\\n  --from-literal=PASSWORD=$PASSWORD \\\\\n  --dry-run=client -o yaml > kubernetes/db_admin_password.yaml\n\nmkdir ./secret\nterraform output db_connection_certbase64 | base64 --decode > ./secret/db_ca.crt\nkubectl create secret generic db-ssl-ca-cert \\\\\n  --from-file=./secret/db_ca.crt \\\\\n  --dry-run=client -o yaml > kubernetes/db_ca_cert.yaml\nrm -rf ./secret\n`}</code></pre>\n    <p>{`The new `}<inlineCode parentName=\"p\">{`deployment.yaml`}</inlineCode>{` uses the ConfigMap to initialize the database but this time with an `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\"\n      }}>{`Init Container`}</a>{` to execute the `}<inlineCode parentName=\"p\">{`import.py`}</inlineCode>{` python script. Both containers get the ConfigMap with the environment variables and the two Secrets.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=kubernetes/deployment.yaml\",\n        \"path\": \"kubernetes/deployment.yaml\"\n      }}>{`apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: movies\n  name: movies\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: movies\n  template:\n    metadata:\n      labels:\n        app: movies\n    spec:\n      volumes:\n        - name: db-volume\n          configMap:\n            name: movies-db\n        - name: db-ca-cert\n          secret:\n            secretName: db-ssl-ca-cert\n      initContainers:\n        - name: init-db\n          image: us.icr.io/iac-registry/movies:2.0\n          command: [\"python\", \"import.py\"]\n          envFrom:\n            - secretRef:\n                name: db-admin-password\n            - configMapRef:\n                name: config\n          volumeMounts:\n            - name: db-volume\n              mountPath: /data/init\n            - name: db-ca-cert\n              mountPath: \"/secret\"\n              readOnly: true\n      containers:\n        - image: us.icr.io/iac-registry/movies:2.0\n          name: movies\n          envFrom:\n            - secretRef:\n                name: db-admin-password\n            - configMapRef:\n                name: config\n          volumeMounts:\n            - name: db-ca-cert\n              mountPath: \"/secret\"\n              readOnly: true\n`}</code></pre>\n    <p>{`All is set to apply the new Deployment, Services, Secrets and ConfigMaps with the following commands.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl apply -f kubernetes/cm.yaml\nkubectl apply -f kubernetes/config.yaml\nkubectl apply -f kubernetes/db_admin_password.yaml\nkubectl apply -f kubernetes/db_ca_cert.yaml\nkubectl apply -f kubernetes/deployment.yaml\nkubectl apply -f kubernetes/service.yaml\n`}</code></pre>\n    <p>{`The PersistentVolumeClaim is not longer required for this version, so you may delete it with this command.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl delete pvc movies\nwatch kubectl get pv,pvc\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`VRF enablement`}</strong></p>\n      <p>{`VRF stands for `}<strong parentName=\"p\">{`Virtual Route Framework`}</strong>{`, it’s a way for routers to partition route tables logically, sort of like VLANS for L3.`}</p>\n      <p>{`The new generation of private connectivity for VPC requires that each account switch over to VRF, giving all the networks in the account it’s own routing context.`}</p>\n      <p>{`If at this point you are having troubles to connect to the database from the container chances are you need to enable VRF to your account. Submit a ticket to the IBM Cloud Support team for VRF enablement.`}</p>\n      <p>{`Read this `}<a parentName=\"p\" {...{\n          \"href\": \"https://cloud.ibm.com/docs/resources?topic=resources-private-network-endpoints\"\n        }}>{`documentation`}</a>{` to know more.`}</p>\n    </InlineNotification>\n    <p>{`One of the differences with the version 1 is that this new architecture allows us to scale up the replicas of the pods. You can try it with these commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl scale deployment movies --replicas=5\n\nwatch kubectl get po,deploy,rs\n`}</code></pre>\n    <p>{`To verify the application is working, use the same `}<inlineCode parentName=\"p\">{`curl`}</inlineCode>{` commands we’ve been using.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ADDRESS=$(kubectl get svc movies -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')\n\n# Get all movies\ncurl $ADDRESS/api/movies\n\n# Get a movie\nid=$(curl -s \"http://$ADDRESS/api/movies\" | jq -r '.[0]._id | .[\"$oid\"]')\ncurl \"http://$ADDRESS/api/movies/$id\" | jq\n\n# Create a movie\nid=$(curl -s -X POST -H \"Content-Type: application/json\" -d@data/v2/new_movie.json $ADDRESS/api/movies | jq -r '.id')\ncurl $ADDRESS/api/movies/$id\n\n# Update a movie\nsed 's/13 Assassins/14 Assassins/' data/v2/new_movie.json > data/v2/update_movie.json\ncurl -s -X PUT -H \"Content-Type: application/json\" -d@data/v2/update_movie.json $ADDRESS/api/movies/$id\ncurl $ADDRESS/api/movies/$id\nrm data/v2/update_movie.json\n\n# Delete a movie\ncurl -X DELETE $ADDRESS/api/movies/$id\ncurl $ADDRESS/api/movies/$id\ncurl -s $ADDRESS/api/movies | grep '14 Assassins'\n`}</code></pre>\n    <p>{`There is more that you can do with this sample application, you can:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Add resource limits to the Pod so is can be scaled up or down automatically`}</li>\n      <li parentName=\"ul\">{`Deploy a new Angular, React or Vue application to visualize the movies`}</li>\n      <li parentName=\"ul\">{`Deploy a container with your own MongoDB to use it instead of the IBM Cloud MongoDB`}</li>\n    </ul>\n    <h2>{`Deployment Troubleshooting`}</h2>\n    <p>{`If you have any problem with the validation and want to `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/tasks/debug-application-cluster/\"\n      }}>{`debug or troubleshot it`}</a>{`, use the following commands to identify the root cause.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl get deploy,po\n\npod_id=$(kubectl get deploy,po | grep pod/movies | head -1 | awk '{print $1}')\n\nkubectl describe pod $pod_id\nkubectl logs $pod_id\nkubectl logs $pod_id init-db\n\nkubectl exec $pod_id --container init-db -- cat /secret/db_ca.crt\nkubectl exec $pod_id --container movies -- env | grep APP\n`}</code></pre>\n    <p>{`If you need to login to a container replace the `}<inlineCode parentName=\"p\">{`command`}</inlineCode>{` in the deployment for `}<inlineCode parentName=\"p\">{`command: [\"/bin/sh\", \"-c\", \"while true; do sleep 1000;done\"]`}</inlineCode>{` so it doesn’t fail and you have time to execute a remote bash session.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl exec --stdin --tty $pod_id -- /bin/bash\nkubectl exec --stdin --tty $pod_id --container init-db  -- /bin/bash\n`}</code></pre>\n    <p>{`If you need to connect to the database and it has a private endpoint, deploy a MongoDB container with the `}<inlineCode parentName=\"p\">{`mongo`}</inlineCode>{` client and the required ConfigMaps and Secrets to connect to the database. Push to ICR the official MongoDB image and execute the `}<inlineCode parentName=\"p\">{`kubectl`}</inlineCode>{` generator, then modify the output file to include the ConfigMap and Secrets:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker pull mongo:bionic\ndocker tag mongo:bionic us.icr.io/iac-registry/mongo:bionic\ndocker push us.icr.io/iac-registry/mongo:bionic\n\nkubectl create deployment mongo --image us.icr.io/iac-registry/mongo:bionic --dry-run=client -o yaml > kubernetes/mongo.yaml\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=kubernetes/mongo.yaml\",\n        \"path\": \"kubernetes/mongo.yaml\"\n      }}>{`apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: mongo\n  name: mongo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mongo\n  template:\n    metadata:\n      labels:\n        app: mongo\n    spec:\n      containers:\n        - image: us.icr.io/iac-registry/mongo:bionic\n          name: mongo\n          envFrom:\n            - secretRef:\n                name: db-admin-password\n            - configMapRef:\n                name: config\n          volumeMounts:\n            - name: db-volume\n              mountPath: /data/init\n            - name: db-ca-cert\n              mountPath: \"/secret\"\n              readOnly: true\n`}</code></pre>\n    <p>{`Then login into the container and run the `}<inlineCode parentName=\"p\">{`mongo`}</inlineCode>{` client like so.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl exec --stdin --tty $(kubectl get pods | grep mongo | awk '{print $1}')  -- /bin/bash\n# verify the enviroment variable APP_MONGODB_URI has the password from $PASSWORD\nAPP_MONGODB_URI=$(echo $APP_MONGODB_URI | sed -e \"s/\\\\$PASSWORD/$PASSWORD/\" -e \"s/ibmclouddb/moviesdb/\")\necho $APP_MONGODB_URI\nmongo $APP_MONGODB_URI --tls --tlsCAFile $APP_SSL_CA_CERT\n`}</code></pre>\n    <p>{`Or, instead, just execute this one-liner:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl exec --stdin --tty $(kubectl get pods | grep mongo | awk '{print $1}')  -- /bin/bash -c 'mongo $(echo $APP_MONGODB_URI | sed -e \"s/\\\\$PASSWORD/$PASSWORD/\" -e \"s/ibmclouddb/moviesdb/\") --tls --tlsCAFile $APP_SSL_CA_CERT'\n`}</code></pre>\n    <h2>{`Final Code`}</h2>\n    <p>{`All the code used for this pattern is located and available to download in the GitHub repository `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/cloud-enterprise-examples/\"\n      }}>{`https://github.com/IBM/cloud-enterprise-examples/`}</a>{` in the directory `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/cloud-enterprise-examples/tree/master/iac/09-containers\"\n      }}>{`09-containers`}</a>{`. The main files for the latest version (version 2) of the application are:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=network.tf\",\n        \"path\": \"network.tf\"\n      }}>{`resource \"ibm_is_vpc\" \"iac_iks_vpc\" {\n  name = \"\\${var.project_name}-\\${var.environment}-vpc\"\n}\n\nresource \"ibm_is_subnet\" \"iac_iks_subnet\" {\n  count                    = local.max_size\n  name                     = \"\\${var.project_name}-\\${var.environment}-subnet-\\${format(\"%02s\", count.index)}\"\n  zone                     = var.vpc_zone_names[count.index]\n  vpc                      = ibm_is_vpc.iac_iks_vpc.id\n  total_ipv4_address_count = 256\n  resource_group           = data.ibm_resource_group.group.id\n}\n\nresource \"ibm_is_security_group_rule\" \"iac_iks_security_group_rule_tcp_k8s\" {\n  count     = local.max_size\n  group     = ibm_is_vpc.iac_iks_vpc.default_security_group\n  direction = \"inbound\"\n  remote    = ibm_is_subnet.iac_iks_subnet[count.index].ipv4_cidr_block\n\n  tcp {\n    port_min = 30000\n    port_max = 32767\n  }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=iks.tf\",\n        \"path\": \"iks.tf\"\n      }}>{`resource \"ibm_container_vpc_cluster\" \"iac_iks_cluster\" {\n  name              = \"\\${var.project_name}-\\${var.environment}-cluster\"\n  vpc_id            = ibm_is_vpc.iac_iks_vpc.id\n  flavor            = var.flavors[0]\n  worker_count      = var.workers_count[0]\n  kube_version      = var.k8s_version\n  resource_group_id = data.ibm_resource_group.group.id\n  wait_till         = \"OneWorkerNodeReady\"\n  zones {\n    name      = var.vpc_zone_names[0]\n    subnet_id = ibm_is_subnet.iac_iks_subnet[0].id\n  }\n}\n\nresource \"ibm_container_vpc_worker_pool\" \"iac_iks_cluster_pool\" {\n  count             = local.max_size - 1\n  cluster           = ibm_container_vpc_cluster.iac_iks_cluster.id\n  worker_pool_name  = \"\\${var.project_name}-\\${var.environment}-wp-\\${format(\"%02s\", count.index + 1)}\"\n  flavor            = var.flavors[count.index + 1]\n  vpc_id            = ibm_is_vpc.iac_iks_vpc.id\n  worker_count      = var.workers_count[count.index + 1]\n  resource_group_id = data.ibm_resource_group.group.id\n  zones {\n    name      = var.vpc_zone_names[count.index + 1]\n    subnet_id = ibm_is_subnet.iac_iks_subnet[count.index + 1].id\n  }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=db.tf\",\n        \"path\": \"db.tf\"\n      }}>{`resource \"ibm_database\" \"iac_app_db_instance\" {\n  name              = var.db_name\n  plan              = var.db_plan\n  location          = var.region\n  service           = \"databases-for-mongodb\"\n  resource_group_id = data.ibm_resource_group.group.id\n  service_endpoints = \"private\"\n\n  adminpassword                = var.db_admin_password\n  members_memory_allocation_mb = var.db_memory_allocation\n  members_disk_allocation_mb   = var.db_disk_allocation\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=variables.tf\",\n        \"path\": \"variables.tf\"\n      }}>{`variable \"project_name\" {}\nvariable \"environment\" {}\n\nvariable \"resource_group\" {\n  default = \"Default\"\n}\nvariable \"region\" {\n  default = \"us-south\"\n}\nvariable \"vpc_zone_names\" {\n  type    = list(string)\n  default = [\"us-south-1\", \"us-south-2\", \"us-south-3\"]\n}\nvariable \"flavors\" {\n  type    = list(string)\n  default = [\"cx2.2x4\", \"cx2.4x8\", \"cx2.8x16\"]\n}\nvariable \"workers_count\" {\n  type    = list(number)\n  default = [3, 2, 1]\n}\nvariable \"k8s_version\" {\n  default = \"1.18.3\"\n}\n\nlocals {\n  max_size = length(var.vpc_zone_names)\n}\n\nvariable \"db_plan\" {\n  default = \"standard\"\n}\nvariable \"db_name\" {\n  default = \"moviedb\"\n}\nvariable \"db_admin_password\" {\n  default = \"inSecurePa55w0rd\"\n}\nvariable \"db_memory_allocation\" {\n  default = \"3072\"\n}\nvariable \"db_disk_allocation\" {\n  default = \"61440\"\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=output.tf\",\n        \"path\": \"output.tf\"\n      }}>{`output \"cluster_id\" {\n  value = ibm_container_vpc_cluster.iac_iks_cluster.id\n}\noutput \"cluster_name\" {\n  value = ibm_container_vpc_cluster.iac_iks_cluster.name\n}\noutput \"entrypoint\" {\n  value = ibm_container_vpc_cluster.iac_iks_cluster.public_service_endpoint_url\n}\n\noutput \"db_connection_string\" {\n  value = ibm_database.iac_app_db_instance.connectionstrings.0.composed\n}\noutput \"db_connection_certbase64\" {\n  value = ibm_database.iac_app_db_instance.connectionstrings.0.certbase64\n}\noutput \"db_admin_userid\" {\n  value = ibm_database.iac_app_db_instance.adminuser\n}\noutput \"db_id\" {\n  value = ibm_database.iac_app_db_instance.id\n}\noutput \"db_password\" {\n  value = var.db_admin_password\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Dockerfile\",\n        \"metastring\": \"path=docker/2.0/Dockerfile\",\n        \"path\": \"docker/2.0/Dockerfile\"\n      }}>{`FROM python:3.7-slim AS build\n\nRUN apt-get update && \\\\\n  apt-get install -y --no-install-recommends build-essential gcc && \\\\\n  pip install --upgrade pip && \\\\\n  pip install pip-tools\nRUN python -m venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\nCOPY app.py .\nCOPY import.py .\nCOPY requirements.txt requirements.in\nRUN pip-compile requirements.in > requirements.txt && \\\\\n  pip-sync && \\\\\n  pip install -r requirements.txt\n\nFROM python:3.7-slim AS app\nCOPY --from=build /opt/venv /opt/venv\n\nCOPY app.py .\nCOPY import.py .\nRUN chmod +x app.py import.py\n\nENV PATH=\"/opt/venv/bin:$PATH\"\n\nCMD [ \"python\", \"app.py\" ]\n\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=kubernetes/deployment.yaml\",\n        \"path\": \"kubernetes/deployment.yaml\"\n      }}>{`apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: movies\n  name: movies\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: movies\n  template:\n    metadata:\n      labels:\n        app: movies\n    spec:\n      volumes:\n        - name: db-volume\n          configMap:\n            name: movies-db\n        - name: db-ca-cert\n          secret:\n            secretName: db-ssl-ca-cert\n      initContainers:\n        - name: init-db\n          image: us.icr.io/iac-registry/movies:2.3\n          command: [\"python\", \"import.py\"]\n          # command: [\"/bin/sh\", \"-c\", \"while true; do sleep 1000;done\"]\n          envFrom:\n            - secretRef:\n                name: db-admin-password\n            - configMapRef:\n                name: config\n          volumeMounts:\n            - name: db-volume\n              mountPath: /data/init\n            - name: db-ca-cert\n              mountPath: \"/secret\"\n              readOnly: true\n      containers:\n        - image: us.icr.io/iac-registry/movies:2.3\n          name: movies\n          envFrom:\n            - secretRef:\n                name: db-admin-password\n            - configMapRef:\n                name: config\n          volumeMounts:\n            - name: db-ca-cert\n              mountPath: \"/secret\"\n              readOnly: true\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=kubernetes/service.yaml\",\n        \"path\": \"kubernetes/service.yaml\"\n      }}>{`apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: movies\n  name: movies\nspec:\n  ports:\n    - name: \"http\"\n      port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: movies\n  type: LoadBalancer\n`}</code></pre>\n    <h2>{`Clean up`}</h2>\n    <p>{`When you are done with the Kubernetes cluster should destroy it.`}</p>\n    <p>{`If you want to keep the cluster running but remove everything you have done, you can execute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl delete -f kubernetes/\n\nkubectl get configmap,secret,service,deployment,pod,pvc,pv\n`}</code></pre>\n    <p>{`If the cluster was created `}<strong parentName=\"p\">{`using the IBM Cloud CLI`}</strong>{`, execute the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`NAME=iac-iks-cluster\nibmcloud ks cluster rm --cluster $NAME\n\nSubnet_Name=iac-iks-subnet\nSUBNET_ID=$(ibmcloud is subnets --json | jq -r \".[] | select(.name==\\\\\"$Subnet_Name\\\\\").id\")\nibmcloud is subnet-delete $SUBNET_ID\n\nVPC_Name=iac-iks-vpc\nVPC_ID=$(ibmcloud is vpcs --json | jq -r \".[] | select(.name==\\\\\"$VPC_Name\\\\\").id\")\nibmcloud is vpc-delete $VPC_Name\n`}</code></pre>\n    <p>{`If the cluster was created `}<strong parentName=\"p\">{`using Terraform`}</strong>{`, just need to execute the command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`terraform destroy\n`}</code></pre>\n    <p>{`And, if the cluster was created `}<strong parentName=\"p\">{`using IBM Cloud Schematics`}</strong>{`, execute the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ibmcloud schematics workspace list              # Identify the WORKSPACE_ID\nWORKSPACE_ID=\n\nibmcloud schematics destroy --id $WORKSPACE_ID  # Identify the Activity_ID\nibmcloud schematics logs  --id $WORKSPACE_ID --act-id Activity_ID\n\n# ... wait until it's done\n\nibmcloud schematics workspace delete --id $WORKSPACE_ID\nibmcloud schematics workspace list\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}